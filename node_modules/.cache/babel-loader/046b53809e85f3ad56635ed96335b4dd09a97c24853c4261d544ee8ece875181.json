{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [donnePrendPhase, setDonnePrendPhase] = useState(false);\n  const [donneOrPrend, setDonneOrPrend] = useState(null); // Choix du MJ pour \"Donne\" ou \"Prend\"\n  const [donnePrendAlternance, setDonnePrendAlternance] = useState('donne');\n  const [culSecPhase, setCulSecPhase] = useState(false);\n  const [showFinalRecap, setShowFinalRecap] = useState(false);\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return {\n      value,\n      suit\n    };\n  };\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true);\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if (guess === 'rouge' && isRed || guess === 'noir' && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      // Message sarcastique et ajout des gorgées bues\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true); // Attend la confirmation du joueur avant de passer au suivant\n    }\n  };\n  const handleComparisonGuess = guess => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n    if (guess === 'supérieure' && comparison > 0 || guess === 'inférieure' && comparison < 0 || guess === 'égale' && comparison === 0) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleInsideOutsideGuess = guess => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) && currentCard.value < Math.max(...cards.map(card => card.value));\n    if (guess === 'intérieur' && isInside || guess === 'extérieur' && !isInside) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleSuitGuess = guess => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false); // Reset l'attente de confirmation\n    nextTurn(); // Passe au joueur suivant\n  };\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, {\n      toPlayer,\n      amount\n    }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({\n        toPlayer,\n        amount\n      }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowRecap(true);\n        return;\n      }\n      setRoundNumber(prev => prev % 4 + 1); // Passer au tour suivant\n    }\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n  const handleDonnePrendChoice = choice => {\n    setDonneOrPrend(choice);\n    setDonnePrendPhase(true);\n  };\n  const handleNextTurnDonnePrend = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    if (donnePrendAlternance === 'donne') {\n      setDonnePrendAlternance('prend');\n    } else {\n      setDonnePrendAlternance('donne');\n    }\n    setCurrentPlayer(nextPlayer);\n    if (nextPlayer === 0 && donneOrPrend === 'cul-sec') {\n      setCulSecPhase(true);\n    }\n  };\n  const handleCulSec = () => {\n    setCulSecPhase(false);\n    setShowFinalRecap(true);\n  };\n  const renderDonnePrend = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: donnePrendAlternance === 'donne' ? 'Donne tes gorgées' : 'Prend tes gorgées'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextTurnDonnePrend,\n        children: \"J'ai bu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this);\n  };\n  const renderFinalRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [name, \" a distribu\\xE9 \", gorgeesDistribuees[index], \" gorg\\xE9es et a bu \", gorgeesRecues[index], \" gorg\\xE9es.\"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: startGame ? donnePrendPhase ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"donne-prend-phase\",\n      children: culSecPhase ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"On passe au cul sec !!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCulSec,\n          children: \"Cul sec fait\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 15\n      }, this) : showFinalRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this), renderFinalRecap()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }, this) : renderDonnePrend()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }, this) : showRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"R\\xE9capitulatif final des devinettes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }, this), playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [name, \" a distribu\\xE9 \", gorgeesDistribuees[index], \" gorg\\xE9es et a bu \", gorgeesRecues[index], \" gorg\\xE9es.\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 15\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setDonnePrendPhase(true),\n        children: \"Passer \\xE0 Donne/Prend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this), cardRevealed && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }, this), playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [card.value, \" de \", card.suit]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 19\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 15\n      }, this), roundNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est rouge ou noire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('rouge'),\n          children: \"Rouge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('noir'),\n          children: \"Noir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 15\n      }, this), roundNumber === 2 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('supérieure'),\n          children: \"Sup\\xE9rieure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('inférieure'),\n          children: \"Inf\\xE9rieure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('égale'),\n          children: \"\\xC9gale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 15\n      }, this), roundNumber === 3 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est \\xE0 l'int\\xE9rieur ou \\xE0 l'ext\\xE9rieur des cartes pr\\xE9c\\xE9dentes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('intérieur'),\n          children: \"\\xC0 l'int\\xE9rieur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('extérieur'),\n          children: \"\\xC0 l'ext\\xE9rieur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 15\n      }, this), roundNumber === 4 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez la forme de la carte\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('cœur'),\n          children: \"C\\u0153ur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('carreau'),\n          children: \"Carreau\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('pique'),\n          children: \"Pique\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('trèfle'),\n          children: \"Tr\\xE8fle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 15\n      }, this), showDistribution && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 17\n        }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => distributeGorgees(index, 1),\n          children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 15\n      }, this), waitingForConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextTurn,\n          children: \"J'ai bu, tour suivant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"L'Ardechoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: WowGuy,\n        alt: \"WOW Guy\",\n        className: \"wow-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPlayers\",\n          children: \"Nombre de joueurs :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"numPlayers\",\n          value: numPlayers,\n          onChange: handleNumPlayersChange,\n          children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num + 2,\n            children: num + 2\n          }, num + 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-names\",\n          children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Joueur ${index + 1}`,\n            value: name,\n            onChange: e => handlePlayerNameChange(e, index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-btn\",\n        onClick: handleStartGame,\n        children: \"Lancer le jeu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d1hFez/pPAkMQGtnIP/xdvsTjtc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WowGuy","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgeesDistribuees","setGorgeesDistribuees","gorgeesRecues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","showRecap","setShowRecap","waitingForConfirmation","setWaitingForConfirmation","donnePrendPhase","setDonnePrendPhase","donneOrPrend","setDonneOrPrend","donnePrendAlternance","setDonnePrendAlternance","culSecPhase","setCulSecPhase","showFinalRecap","setShowFinalRecap","suits","generateCard","value","Math","floor","random","suit","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","card","alert","handlePlayerGuess","guess","handleColorGuess","handleComparisonGuess","handleInsideOutsideGuess","handleSuitGuess","isRed","newGorgeesRecues","previousCard","comparison","cards","isInside","min","map","max","handleNextTurn","nextTurn","distributeGorgees","toPlayer","amount","newSplitGorgees","totalDistributed","reduce","total","entry","newGorgeesDistribuees","forEach","nextPlayer","newPlayerCards","prev","newCard","handleDonnePrendChoice","choice","handleNextTurnDonnePrend","handleCulSec","renderDonnePrend","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","renderFinalRecap","className","length","src","alt","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n\n  const [donnePrendPhase, setDonnePrendPhase] = useState(false);\n  const [donneOrPrend, setDonneOrPrend] = useState(null); // Choix du MJ pour \"Donne\" ou \"Prend\"\n  const [donnePrendAlternance, setDonnePrendAlternance] = useState('donne');\n  const [culSecPhase, setCulSecPhase] = useState(false);\n  const [showFinalRecap, setShowFinalRecap] = useState(false);\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return { value, suit };\n  };\n\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true);\n\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if ((guess === 'rouge' && isRed) || (guess === 'noir' && !isRed)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      // Message sarcastique et ajout des gorgées bues\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true); // Attend la confirmation du joueur avant de passer au suivant\n    }\n  };\n\n  const handleComparisonGuess = (guess) => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n\n    if ((guess === 'supérieure' && comparison > 0) ||\n        (guess === 'inférieure' && comparison < 0) ||\n        (guess === 'égale' && comparison === 0)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleInsideOutsideGuess = (guess) => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) &&\n                     currentCard.value < Math.max(...cards.map(card => card.value));\n\n    if ((guess === 'intérieur' && isInside) || (guess === 'extérieur' && !isInside)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleSuitGuess = (guess) => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false); // Reset l'attente de confirmation\n    nextTurn(); // Passe au joueur suivant\n  };\n\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, { toPlayer, amount }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({ toPlayer, amount }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowRecap(true);\n        return;\n      }\n      setRoundNumber((prev) => (prev % 4) + 1); // Passer au tour suivant\n    }\n\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  const handleDonnePrendChoice = (choice) => {\n    setDonneOrPrend(choice);\n    setDonnePrendPhase(true);\n  };\n\n  const handleNextTurnDonnePrend = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    if (donnePrendAlternance === 'donne') {\n      setDonnePrendAlternance('prend');\n    } else {\n      setDonnePrendAlternance('donne');\n    }\n\n    setCurrentPlayer(nextPlayer);\n\n    if (nextPlayer === 0 && donneOrPrend === 'cul-sec') {\n      setCulSecPhase(true);\n    }\n  };\n\n  const handleCulSec = () => {\n    setCulSecPhase(false);\n    setShowFinalRecap(true);\n  };\n\n  const renderDonnePrend = () => {\n    return (\n      <div>\n        <h2>{donnePrendAlternance === 'donne' ? 'Donne tes gorgées' : 'Prend tes gorgées'}</h2>\n        <button onClick={handleNextTurnDonnePrend}>J'ai bu</button>\n      </div>\n    );\n  };\n\n  const renderFinalRecap = () => {\n    return playerNames.map((name, index) => (\n      <p key={index}>\n        {name} a distribué {gorgeesDistribuees[index]} gorgées et a bu {gorgeesRecues[index]} gorgées.\n      </p>\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      {startGame ? (\n        donnePrendPhase ? (\n          <div className=\"donne-prend-phase\">\n            {culSecPhase ? (\n              <div>\n                <h2>On passe au cul sec !!</h2>\n                <button onClick={handleCulSec}>Cul sec fait</button>\n              </div>\n            ) : showFinalRecap ? (\n              <div>\n                <h2>Récapitulatif final</h2>\n                {renderFinalRecap()}\n              </div>\n            ) : (\n              renderDonnePrend()\n            )}\n          </div>\n        ) : showRecap ? (\n          <div>\n            <h2>Récapitulatif final des devinettes</h2>\n            {playerNames.map((name, index) => (\n              <p key={index}>\n                {name} a distribué {gorgeesDistribuees[index]} gorgées et a bu {gorgeesRecues[index]} gorgées.\n              </p>\n            ))}\n            <button onClick={() => setDonnePrendPhase(true)}>Passer à Donne/Prend</button>\n          </div>\n        ) : (\n          <div>\n            <h2>{message}</h2>\n\n            {cardRevealed && (\n              <p>Carte révélée : {currentCard.value} de {currentCard.suit}</p>\n            )}\n\n            {playerCards[currentPlayer].length > 0 && (\n              <div>\n                <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n                {playerCards[currentPlayer].map((card, index) => (\n                  <p key={index}>\n                    {card.value} de {card.suit}\n                  </p>\n                ))}\n              </div>\n            )}\n\n            {roundNumber === 1 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez si la carte est rouge ou noire</h3>\n                <button onClick={() => handlePlayerGuess('rouge')}>Rouge</button>\n                <button onClick={() => handlePlayerGuess('noir')}>Noir</button>\n              </div>\n            )}\n\n            {roundNumber === 2 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez si la carte est supérieure, inférieure ou égale à la première</h3>\n                <button onClick={() => handlePlayerGuess('supérieure')}>Supérieure</button>\n                <button onClick={() => handlePlayerGuess('inférieure')}>Inférieure</button>\n                <button onClick={() => handlePlayerGuess('égale')}>Égale</button>\n              </div>\n            )}\n\n            {roundNumber === 3 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez si la carte est à l'intérieur ou à l'extérieur des cartes précédentes</h3>\n                <button onClick={() => handlePlayerGuess('intérieur')}>À l'intérieur</button>\n                <button onClick={() => handlePlayerGuess('extérieur')}>À l'extérieur</button>\n              </div>\n            )}\n\n            {roundNumber === 4 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez la forme de la carte</h3>\n                <button onClick={() => handlePlayerGuess('cœur')}>Cœur</button>\n                <button onClick={() => handlePlayerGuess('carreau')}>Carreau</button>\n                <button onClick={() => handlePlayerGuess('pique')}>Pique</button>\n                <button onClick={() => handlePlayerGuess('trèfle')}>Trèfle</button>\n              </div>\n            )}\n\n            {showDistribution && (\n              <div>\n                <h3>Distribuez vos gorgées ({gorgeesToDistribute} à répartir)</h3>\n                {playerNames.map((name, index) => (\n                  index !== currentPlayer && (\n                    <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                      Donner 1 gorgée à {name}\n                    </button>\n                  )\n                ))}\n              </div>\n            )}\n\n            {/* Afficher le bouton de confirmation lorsque le joueur a perdu */}\n            {waitingForConfirmation && (\n              <div>\n                <button onClick={handleNextTurn}>J'ai bu, tour suivant</button>\n              </div>\n            )}\n          </div>\n        )\n      ) : (\n        <div className=\"player-setup\">\n          <h1 className=\"title\">L'Ardechoise</h1>\n          <img src={WowGuy} alt=\"WOW Guy\" className=\"wow-image\" />\n          <div className=\"player-selection\">\n            <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n            <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n              {[...Array(9).keys()].map((num) => (\n                <option key={num + 2} value={num + 2}>\n                  {num + 2}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"player-names\">\n              {playerNames.map((name, index) => (\n                <input\n                  key={index}\n                  type=\"text\"\n                  placeholder={`Joueur ${index + 1}`}\n                  value={name}\n                  onChange={(e) => handlePlayerNameChange(e, index)}\n                />\n              ))}\n            </div>\n          </div>\n\n          <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}