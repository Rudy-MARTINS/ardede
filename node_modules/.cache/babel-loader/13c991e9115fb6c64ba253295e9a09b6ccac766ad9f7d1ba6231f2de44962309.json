{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const [deck, setDeck] = useState([]);\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const cardValues = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Reine', 'Roi', 'As'];\n  const jokers = ['Joker1', 'Joker2'];\n\n  // Initialize a full deck of cards (54 cards including two jokers)\n  useEffect(() => {\n    const fullDeck = [];\n    suits.forEach(suit => {\n      cardValues.forEach(value => {\n        fullDeck.push({\n          value,\n          suit\n        });\n      });\n    });\n    fullDeck.push({\n      value: 'LE',\n      suit: 'JOKER MASQUE'\n    });\n    fullDeck.push({\n      value: 'LE',\n      suit: 'JOKER DES BOIS'\n    });\n    setDeck(fullDeck);\n  }, []);\n  const shuffleDeck = deck => {\n    const shuffledDeck = [...deck];\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n    }\n    return shuffledDeck;\n  };\n  const drawCard = () => {\n    if (deck.length === 0) {\n      alert(\"Il n'y a plus de cartes dans le paquet !\");\n      return null;\n    }\n    const newDeck = [...deck];\n    const card = newDeck.pop();\n    setDeck(newDeck);\n    return card;\n  };\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setDeck(shuffleDeck(deck));\n      const card = drawCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true);\n    if (currentCard.suit === 'joker') {\n      setMessage(`JOKER ! Tout le monde boit !`);\n      setDeck(shuffleDeck([...deck, currentCard])); // Remettre le joker dans le paquet\n      nextTurn();\n      return;\n    }\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if (guess === 'rouge' && isRed || guess === 'noir' && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleComparisonGuess = guess => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = cardValues.indexOf(currentCard.value) - cardValues.indexOf(previousCard.value);\n    if (guess === 'supérieure' && comparison > 0 || guess === 'inférieure' && comparison < 0 || guess === 'égale' && comparison === 0) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleInsideOutsideGuess = guess => {\n    const cards = playerCards[currentPlayer];\n    const values = cards.map(card => cardValues.indexOf(card.value));\n    const isInside = cardValues.indexOf(currentCard.value) > Math.min(...values) && cardValues.indexOf(currentCard.value) < Math.max(...values);\n    if (guess === 'intérieur' && isInside || guess === 'extérieur' && !isInside) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleSuitGuess = guess => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, {\n      toPlayer,\n      amount\n    }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({\n        toPlayer,\n        amount\n      }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber(prev => prev % 4 + 1);\n    }\n    const newCard = drawCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n  const renderRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [name, \" a tir\\xE9 : \", playerCards[index].map(card => `${card.value} de ${card.suit}`).join(', ')]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this));\n  };\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: startGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: showRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif des cartes tir\\xE9es\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this), renderRecap(), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueToRecap,\n          children: \"On passe \\xE0 la suite !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }, this) : showIntermediatePage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"La premi\\xE8re phase de jeu est termin\\xE9e !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueToRecap,\n          children: \"Passer au r\\xE9cap provisoire avant la suite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 15\n        }, this), cardRevealed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, this), playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 19\n          }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [card.value, \" de \", card.suit]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }, this), roundNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est rouge ou noire\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('rouge'),\n            children: \"Rouge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('noir'),\n            children: \"Noir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }, this), roundNumber === 2 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('supérieure'),\n            children: \"Sup\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('inférieure'),\n            children: \"Inf\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('égale'),\n            children: \"\\xC9gale\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 17\n        }, this), roundNumber === 3 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est \\xE0 l'int\\xE9rieur ou \\xE0 l'ext\\xE9rieur des cartes pr\\xE9c\\xE9dentes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('intérieur'),\n            children: \"\\xC0 l'int\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('extérieur'),\n            children: \"\\xC0 l'ext\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 17\n        }, this), roundNumber === 4 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez la forme de la carte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('cœur'),\n            children: \"C\\u0153ur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('carreau'),\n            children: \"Carreau\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('pique'),\n            children: \"Pique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('trèfle'),\n            children: \"Tr\\xE8fle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }, this), showDistribution && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 19\n          }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => distributeGorgees(index, 1),\n            children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 23\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 17\n        }, this), waitingForConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextTurn,\n            children: \"J'ai bu, tour suivant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"L'Ardechoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: WowGuy,\n        alt: \"WOW Guy\",\n        className: \"wow-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPlayers\",\n          children: \"Nombre de joueurs :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"numPlayers\",\n          value: numPlayers,\n          onChange: handleNumPlayersChange,\n          children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num + 2,\n            children: num + 2\n          }, num + 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-names\",\n          children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Joueur ${index + 1}`,\n            value: name,\n            onChange: e => handlePlayerNameChange(e, index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-btn\",\n        onClick: handleStartGame,\n        children: \"Lancer le jeu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9WXDSqGpXlWXQ3FJJbG+3OHW2Hc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WowGuy","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgeesDistribuees","setGorgeesDistribuees","gorgeesRecues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","showRecap","setShowRecap","waitingForConfirmation","setWaitingForConfirmation","showIntermediatePage","setShowIntermediatePage","deck","setDeck","suits","cardValues","jokers","fullDeck","forEach","suit","value","push","shuffleDeck","shuffledDeck","i","length","j","Math","floor","random","drawCard","alert","newDeck","card","pop","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","handlePlayerGuess","guess","nextTurn","handleColorGuess","handleComparisonGuess","handleInsideOutsideGuess","handleSuitGuess","isRed","newGorgeesRecues","previousCard","comparison","indexOf","cards","values","map","isInside","min","max","handleNextTurn","distributeGorgees","toPlayer","amount","newSplitGorgees","totalDistributed","reduce","total","entry","newGorgeesDistribuees","nextPlayer","newPlayerCards","prev","newCard","renderRecap","children","join","fileName","_jsxFileName","lineNumber","columnNumber","handleContinueToRecap","className","onClick","src","alt","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const [deck, setDeck] = useState([]);\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const cardValues = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Reine', 'Roi', 'As'];\n  const jokers = ['Joker1', 'Joker2'];\n\n  // Initialize a full deck of cards (54 cards including two jokers)\n  useEffect(() => {\n    const fullDeck = [];\n    suits.forEach(suit => {\n      cardValues.forEach(value => {\n        fullDeck.push({ value, suit });\n      });\n    });\n    fullDeck.push({ value: 'LE', suit: 'JOKER MASQUE' });\n    fullDeck.push({ value: 'LE', suit: 'JOKER DES BOIS' });\n    setDeck(fullDeck);\n  }, []);\n\n  const shuffleDeck = (deck) => {\n    const shuffledDeck = [...deck];\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n    }\n    return shuffledDeck;\n  };\n\n  const drawCard = () => {\n    if (deck.length === 0) {\n      alert(\"Il n'y a plus de cartes dans le paquet !\");\n      return null;\n    }\n    const newDeck = [...deck];\n    const card = newDeck.pop();\n    setDeck(newDeck);\n    return card;\n  };\n\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setDeck(shuffleDeck(deck));\n      const card = drawCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true);\n\n    if (currentCard.suit === 'joker') {\n      setMessage(`JOKER ! Tout le monde boit !`);\n      setDeck(shuffleDeck([...deck, currentCard])); // Remettre le joker dans le paquet\n      nextTurn();\n      return;\n    }\n\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if ((guess === 'rouge' && isRed) || (guess === 'noir' && !isRed)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleComparisonGuess = (guess) => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = cardValues.indexOf(currentCard.value) - cardValues.indexOf(previousCard.value);\n\n    if ((guess === 'supérieure' && comparison > 0) ||\n        (guess === 'inférieure' && comparison < 0) ||\n        (guess === 'égale' && comparison === 0)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleInsideOutsideGuess = (guess) => {\n    const cards = playerCards[currentPlayer];\n    const values = cards.map(card => cardValues.indexOf(card.value));\n    const isInside = cardValues.indexOf(currentCard.value) > Math.min(...values) &&\n                     cardValues.indexOf(currentCard.value) < Math.max(...values);\n\n    if ((guess === 'intérieur' && isInside) || (guess === 'extérieur' && !isInside)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleSuitGuess = (guess) => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, { toPlayer, amount }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({ toPlayer, amount }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber((prev) => (prev % 4) + 1);\n    }\n\n    const newCard = drawCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  const renderRecap = () => {\n    return playerNames.map((name, index) => (\n      <p key={index}>\n        {name} a tiré : {playerCards[index].map(card => `${card.value} de ${card.suit}`).join(', ')}\n      </p>\n    ));\n  };\n\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {startGame ? (\n        <div className=\"game\">\n          {showRecap ? (\n            <div>\n              <h2>Récapitulatif des cartes tirées</h2>\n              {renderRecap()}\n              <button onClick={handleContinueToRecap}>On passe à la suite !</button>\n            </div>\n          ) : showIntermediatePage ? (\n            <div>\n              <h2>La première phase de jeu est terminée !</h2>\n              <p>Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !</p>\n              <button onClick={handleContinueToRecap}>Passer au récap provisoire avant la suite</button>\n            </div>\n          ) : (\n            <div>\n              <h2>{message}</h2>\n\n              {cardRevealed && (\n                <p>Carte révélée : {currentCard.value} de {currentCard.suit}</p>\n              )}\n\n              {playerCards[currentPlayer].length > 0 && (\n                <div>\n                  <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n                  {playerCards[currentPlayer].map((card, index) => (\n                    <p key={index}>\n                      {card.value} de {card.suit}\n                    </p>\n                  ))}\n                </div>\n              )}\n\n              {roundNumber === 1 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est rouge ou noire</h3>\n                  <button onClick={() => handlePlayerGuess('rouge')}>Rouge</button>\n                  <button onClick={() => handlePlayerGuess('noir')}>Noir</button>\n                </div>\n              )}\n\n              {roundNumber === 2 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est supérieure, inférieure ou égale à la première</h3>\n                  <button onClick={() => handlePlayerGuess('supérieure')}>Supérieure</button>\n                  <button onClick={() => handlePlayerGuess('inférieure')}>Inférieure</button>\n                  <button onClick={() => handlePlayerGuess('égale')}>Égale</button>\n                </div>\n              )}\n\n              {roundNumber === 3 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est à l'intérieur ou à l'extérieur des cartes précédentes</h3>\n                  <button onClick={() => handlePlayerGuess('intérieur')}>À l'intérieur</button>\n                  <button onClick={() => handlePlayerGuess('extérieur')}>À l'extérieur</button>\n                </div>\n              )}\n\n              {roundNumber === 4 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez la forme de la carte</h3>\n                  <button onClick={() => handlePlayerGuess('cœur')}>Cœur</button>\n                  <button onClick={() => handlePlayerGuess('carreau')}>Carreau</button>\n                  <button onClick={() => handlePlayerGuess('pique')}>Pique</button>\n                  <button onClick={() => handlePlayerGuess('trèfle')}>Trèfle</button>\n                </div>\n              )}\n\n              {showDistribution && (\n                <div>\n                  <h3>Distribuez vos gorgées ({gorgeesToDistribute} à répartir)</h3>\n                  {playerNames.map((name, index) => (\n                    index !== currentPlayer && (\n                      <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                        Donner 1 gorgée à {name}\n                      </button>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {waitingForConfirmation && (\n                <div>\n                  <button onClick={handleNextTurn}>J'ai bu, tour suivant</button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"player-setup\">\n          <h1 className=\"title\">L'Ardechoise</h1>\n          <img src={WowGuy} alt=\"WOW Guy\" className=\"wow-image\" />\n          <div className=\"player-selection\">\n            <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n            <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n              {[...Array(9).keys()].map((num) => (\n                <option key={num + 2} value={num + 2}>\n                  {num + 2}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"player-names\">\n              {playerNames.map((name, index) => (\n                <input\n                  key={index}\n                  type=\"text\"\n                  placeholder={`Joueur ${index + 1}`}\n                  value={name}\n                  onChange={(e) => handlePlayerNameChange(e, index)}\n                />\n              ))}\n            </div>\n          </div>\n\n          <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}