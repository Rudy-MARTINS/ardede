{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\n// DonnePrendPhase.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DonnePrendPhase({\n  playerNames,\n  gorgeesDistribuees,\n  gorgeesRecues,\n  updateGorgees\n}) {\n  _s();\n  const [revealedCards, setRevealedCards] = useState(Array(9).fill(false)); // Pour suivre les cartes révélées\n  const cardLabels = ['1 gorgée', '2 gorgées', '3 gorgées', '4 gorgées'];\n\n  // Fonction pour révéler une carte\n  const revealCard = index => {\n    if (index === 8 || index < 8 && revealedCards[index - 2] && revealedCards[index - 1]) {\n      let newRevealedCards = [...revealedCards];\n      newRevealedCards[index] = true;\n      setRevealedCards(newRevealedCards);\n    } else {\n      alert(\"Vous devez d'abord révéler les cartes précédentes !\");\n    }\n  };\n\n  // Gestion des gorgées distribuées ou bues\n  const handleDrinkOrDistribute = (index, actionType, amount) => {\n    if (actionType === \"distribute\") {\n      // Distribution logique ici\n    } else if (actionType === \"drink\") {\n      // Boire logique ici\n    }\n\n    // Mise à jour des gorgées pour le récap final\n    updateGorgees(index, actionType, amount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Je donne\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), cardLabels.slice(0, 4).map((label, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${revealedCards[index] ? 'revealed' : 'hidden'}`,\n        onClick: () => revealCard(index),\n        children: revealedCards[index] ? `Carte révélée : ${label}` : label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Je prends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), cardLabels.slice(0, 4).map((label, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${revealedCards[index + 4] ? 'revealed' : 'hidden'}`,\n        onClick: () => revealCard(index + 4),\n        children: revealedCards[index + 4] ? `Carte révélée : ${label}` : label\n      }, index + 4, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cul-sec\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${revealedCards[8] ? 'revealed' : 'hidden'}`,\n        onClick: () => revealCard(8),\n        children: revealedCards[8] ? \"Cul Sec révélé !\" : \"Cul Sec\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(DonnePrendPhase, \"drFBkBsyUk8bN8Ir9p7QjZR8H8M=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DonnePrendPhase","playerNames","gorgeesDistribuees","gorgeesRecues","updateGorgees","_s","revealedCards","setRevealedCards","Array","fill","cardLabels","revealCard","index","newRevealedCards","alert","handleDrinkOrDistribute","actionType","amount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","label","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["// DonnePrendPhase.js\nimport React, { useState } from 'react';\n\nfunction DonnePrendPhase({ playerNames, gorgeesDistribuees, gorgeesRecues, updateGorgees }) {\n  const [revealedCards, setRevealedCards] = useState(Array(9).fill(false)); // Pour suivre les cartes révélées\n  const cardLabels = ['1 gorgée', '2 gorgées', '3 gorgées', '4 gorgées'];\n\n  // Fonction pour révéler une carte\n  const revealCard = (index) => {\n    if (index === 8 || (index < 8 && revealedCards[index - 2] && revealedCards[index - 1])) {\n      let newRevealedCards = [...revealedCards];\n      newRevealedCards[index] = true;\n      setRevealedCards(newRevealedCards);\n    } else {\n      alert(\"Vous devez d'abord révéler les cartes précédentes !\");\n    }\n  };\n\n  // Gestion des gorgées distribuées ou bues\n  const handleDrinkOrDistribute = (index, actionType, amount) => {\n    if (actionType === \"distribute\") {\n      // Distribution logique ici\n    } else if (actionType === \"drink\") {\n      // Boire logique ici\n    }\n\n    // Mise à jour des gorgées pour le récap final\n    updateGorgees(index, actionType, amount);\n  };\n\n  return (\n    <div className=\"donne-prend-container\">\n      {/* Colonne Donne */}\n      <div className=\"column\">\n        <h3>Je donne</h3>\n        {cardLabels.slice(0, 4).map((label, index) => (\n          <div\n            key={index}\n            className={`card ${revealedCards[index] ? 'revealed' : 'hidden'}`}\n            onClick={() => revealCard(index)}\n          >\n            {revealedCards[index] ? `Carte révélée : ${label}` : label}\n          </div>\n        ))}\n      </div>\n\n      {/* Colonne Prend */}\n      <div className=\"column\">\n        <h3>Je prends</h3>\n        {cardLabels.slice(0, 4).map((label, index) => (\n          <div\n            key={index + 4}\n            className={`card ${revealedCards[index + 4] ? 'revealed' : 'hidden'}`}\n            onClick={() => revealCard(index + 4)}\n          >\n            {revealedCards[index + 4] ? `Carte révélée : ${label}` : label}\n          </div>\n        ))}\n      </div>\n\n      {/* Carte \"Cul Sec\" */}\n      <div className=\"cul-sec\">\n        <div\n          className={`card ${revealedCards[8] ? 'revealed' : 'hidden'}`}\n          onClick={() => revealCard(8)}\n        >\n          {revealedCards[8] ? \"Cul Sec révélé !\" : \"Cul Sec\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}