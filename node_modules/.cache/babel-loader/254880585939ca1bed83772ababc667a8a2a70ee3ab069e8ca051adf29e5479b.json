{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck,\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [phase, setPhase] = useState(\"donne\"); // \"donne\" ou \"prend\"\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(1); // On commence avec 1 gorgée à distribuer\n  const [message, setMessage] = useState(\"\");\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = toPlayer => {\n    updateGorgees(toPlayer, gorgeesToDistribute);\n    setMessage(`${players[toPlayer]} a reçu ${gorgeesToDistribute} gorgée(s).`);\n    // On passe à la phase \"prend\" après avoir distribué\n    setPhase(\"prend\");\n    setCardRevealed(false); // Pour permettre de tirer une nouvelle carte\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phase Donne/Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), phase === \"donne\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Je donne \", gorgeesToDistribute, \" gorg\\xE9e(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawCard,\n        children: \"Tirer une carte\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: players.map((name, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDistributeGorgee(index),\n            children: [\"Donner \", gorgeesToDistribute, \" gorg\\xE9e(s) \\xE0 \", name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), phase === \"prend\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Je prends \", gorgeesToDistribute, \" gorg\\xE9e(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawCard,\n        children: \"Tirer une carte pour \\\"Je prends\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"8CsuKIFY9xClc99WDOw/pJkbTG0=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","DonnePrendPhase","players","remainingDeck","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","phase","setPhase","gorgeesToDistribute","setGorgeesToDistribute","message","setMessage","drawCard","length","newDeck","card","pop","value","suit","handleDistributeGorgee","toPlayer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","name","index","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck, updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [phase, setPhase] = useState(\"donne\"); // \"donne\" ou \"prend\"\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(1); // On commence avec 1 gorgée à distribuer\n  const [message, setMessage] = useState(\"\");\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = (toPlayer) => {\n    updateGorgees(toPlayer, gorgeesToDistribute);\n    setMessage(`${players[toPlayer]} a reçu ${gorgeesToDistribute} gorgée(s).`);\n    // On passe à la phase \"prend\" après avoir distribué\n    setPhase(\"prend\");\n    setCardRevealed(false); // Pour permettre de tirer une nouvelle carte\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase Donne/Prend</h1>\n\n      {phase === \"donne\" && (\n        <>\n          <h2>Je donne {gorgeesToDistribute} gorgée(s)</h2>\n          {!cardRevealed ? (\n            <button onClick={drawCard}>Tirer une carte</button>\n          ) : (\n            <div>\n              <p>{message}</p>\n              <div>\n                {players.map((name, index) => (\n                  <button key={index} onClick={() => handleDistributeGorgee(index)}>\n                    Donner {gorgeesToDistribute} gorgée(s) à {name}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n\n      {phase === \"prend\" && (\n        <>\n          <h2>Je prends {gorgeesToDistribute} gorgée(s)</h2>\n          <button onClick={drawCard}>Tirer une carte pour \"Je prends\"</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}