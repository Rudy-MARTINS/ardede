{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck,\n  playerCards,\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [playersWithCard, setPlayersWithCard] = useState([]);\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0);\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    console.log(\"Tirage d'une carte lancé\");\n    if (!remainingDeck || remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    console.log(\"Deck avant tirage: \", remainingDeck);\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Vérification des cartes des joueurs\n    console.log(\"Cartes des joueurs : \", playerCards);\n    console.log(\"Carte actuelle tirée : \", card);\n\n    // Trouver les joueurs qui ont cette carte\n    const playersWithThisCard = players.map((player, index) => {\n      var _playerCards$index;\n      return {\n        playerName: player,\n        playerIndex: index,\n        hasCard: (_playerCards$index = playerCards[index]) === null || _playerCards$index === void 0 ? void 0 : _playerCards$index.some(playerCard => (playerCard === null || playerCard === void 0 ? void 0 : playerCard.value) === (card === null || card === void 0 ? void 0 : card.value) && (playerCard === null || playerCard === void 0 ? void 0 : playerCard.suit) === (card === null || card === void 0 ? void 0 : card.suit))\n      };\n    }).filter(playerData => playerData.hasCard);\n    if (playersWithThisCard.length === 0) {\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n    } else {\n      setPlayersWithCard(playersWithThisCard.map(p => p.playerIndex));\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = toPlayer => {\n    updateGorgees(toPlayer, 1);\n    const currentGiver = players[playersWithCard[currentGiverIndex]];\n    setMessage(`${currentGiver} a distribué 1 gorgée à ${players[toPlayer]}.`);\n\n    // Passer au prochain joueur qui doit distribuer ou terminer\n    if (currentGiverIndex < playersWithCard.length - 1) {\n      setCurrentGiverIndex(currentGiverIndex + 1);\n    } else {\n      setMessage(\"Distribution terminée. Passer au joueur suivant.\");\n      setTimeout(endDonnePrendPhase, 2000); // Attendre avant de passer à l'étape suivante\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phase Donne/Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: drawCard,\n      children: \"Tirer une carte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), playersWithCard.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: playersWithCard[currentGiverIndex] !== undefined && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [players[playersWithCard[currentGiverIndex]], \", distribuez vos gorg\\xE9es\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 19\n          }, this), players.map((name, index) => index !== playersWithCard[currentGiverIndex] && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDistributeGorgee(index),\n            children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 23\n          }, this))]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Aucun joueur n'a cette carte. Nouvelle carte en mode Hardcore...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"9GN222msudnuUE8YCNvIbVEK7KM=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","DonnePrendPhase","players","remainingDeck","playerCards","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","message","setMessage","playersWithCard","setPlayersWithCard","currentGiverIndex","setCurrentGiverIndex","drawCard","console","log","length","newDeck","card","pop","value","suit","playersWithThisCard","map","player","index","_playerCards$index","playerName","playerIndex","hasCard","some","playerCard","filter","playerData","p","handleDistributeGorgee","toPlayer","currentGiver","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","undefined","name","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck, playerCards, updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [playersWithCard, setPlayersWithCard] = useState([]);\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0);\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    console.log(\"Tirage d'une carte lancé\");\n    if (!remainingDeck || remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n\n    console.log(\"Deck avant tirage: \", remainingDeck);\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Vérification des cartes des joueurs\n    console.log(\"Cartes des joueurs : \", playerCards);\n    console.log(\"Carte actuelle tirée : \", card);\n\n    // Trouver les joueurs qui ont cette carte\n    const playersWithThisCard = players\n      .map((player, index) => ({\n        playerName: player,\n        playerIndex: index,\n        hasCard: playerCards[index]?.some(\n          (playerCard) => playerCard?.value === card?.value && playerCard?.suit === card?.suit\n        ),\n      }))\n      .filter((playerData) => playerData.hasCard);\n\n    if (playersWithThisCard.length === 0) {\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n    } else {\n      setPlayersWithCard(playersWithThisCard.map((p) => p.playerIndex));\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = (toPlayer) => {\n    updateGorgees(toPlayer, 1);\n    const currentGiver = players[playersWithCard[currentGiverIndex]];\n    setMessage(`${currentGiver} a distribué 1 gorgée à ${players[toPlayer]}.`);\n\n    // Passer au prochain joueur qui doit distribuer ou terminer\n    if (currentGiverIndex < playersWithCard.length - 1) {\n      setCurrentGiverIndex(currentGiverIndex + 1);\n    } else {\n      setMessage(\"Distribution terminée. Passer au joueur suivant.\");\n      setTimeout(endDonnePrendPhase, 2000); // Attendre avant de passer à l'étape suivante\n    }\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase Donne/Prend</h1>\n      {!cardRevealed ? (\n        <button onClick={drawCard}>Tirer une carte</button>\n      ) : (\n        <div>\n          <p>{message}</p>\n          {playersWithCard.length > 0 ? (\n            <div>\n              {playersWithCard[currentGiverIndex] !== undefined && (\n                <>\n                  <h3>{players[playersWithCard[currentGiverIndex]]}, distribuez vos gorgées</h3>\n                  {players.map((name, index) => (\n                    index !== playersWithCard[currentGiverIndex] && (\n                      <button key={index} onClick={() => handleDistributeGorgee(index)}>\n                        Donner 1 gorgée à {name}\n                      </button>\n                    )\n                  ))}\n                </>\n              )}\n            </div>\n          ) : (\n            <p>Aucun joueur n'a cette carte. Nouvelle carte en mode Hardcore...</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}