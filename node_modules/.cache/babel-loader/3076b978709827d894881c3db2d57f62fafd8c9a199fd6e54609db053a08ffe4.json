{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([])); // Cartes tirées\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const cardValues = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Valet', 'Reine', 'Roi', 'As'];\n  const generateCard = () => {\n    const value = cardValues[Math.floor(Math.random() * cardValues.length)];\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return {\n      value,\n      suit\n    };\n  };\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true);\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if (guess === 'rouge' && isRed || guess === 'noir' && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n  const savePlayerCard = () => {\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n  };\n  const handleComparisonGuess = guess => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n    if (guess === 'supérieure' && comparison > 0 || guess === 'inférieure' && comparison < 0 || guess === 'égale' && comparison === 0) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n  const handleInsideOutsideGuess = guess => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) && currentCard.value < Math.max(...cards.map(card => card.value));\n    if (guess === 'intérieur' && isInside || guess === 'extérieur' && !isInside) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n  const handleSuitGuess = guess => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, {\n      toPlayer,\n      amount\n    }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({\n        toPlayer,\n        amount\n      }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber(prev => prev % 4 + 1);\n    }\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  // Récap provisoire modifié pour afficher les cartes tirées par les joueurs\n  const renderRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [name, \" : \", playerCards[index].map((card, i) => `${card.value} de ${card.suit}`).join(', ')]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this));\n  };\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: startGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: showRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif provisoire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this), renderRecap(), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueToRecap,\n          children: \"On passe \\xE0 la suite !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this) : showIntermediatePage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"La premi\\xE8re phase de jeu est termin\\xE9e !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueToRecap,\n          children: \"Passer au r\\xE9cap provisoire avant la suite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this), cardRevealed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 17\n        }, this), playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 19\n          }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [card.value, \" de \", card.suit]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }, this), roundNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est rouge ou noire\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('rouge'),\n            children: \"Rouge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('noir'),\n            children: \"Noir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 17\n        }, this), roundNumber === 2 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('supérieure'),\n            children: \"Sup\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('inférieure'),\n            children: \"Inf\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('égale'),\n            children: \"\\xC9gale\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this), roundNumber === 3 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est \\xE0 l'int\\xE9rieur ou \\xE0 l'ext\\xE9rieur des cartes pr\\xE9c\\xE9dentes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('intérieur'),\n            children: \"\\xC0 l'int\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('extérieur'),\n            children: \"\\xC0 l'ext\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 17\n        }, this), roundNumber === 4 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez la forme de la carte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('cœur'),\n            children: \"C\\u0153ur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('carreau'),\n            children: \"Carreau\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('pique'),\n            children: \"Pique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('trèfle'),\n            children: \"Tr\\xE8fle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }, this), showDistribution && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 19\n          }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => distributeGorgees(index, 1),\n            children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 23\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 17\n        }, this), waitingForConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextTurn,\n            children: \"J'ai bu, tour suivant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"L'Ardechoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: WowGuy,\n        alt: \"WOW Guy\",\n        className: \"wow-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPlayers\",\n          children: \"Nombre de joueurs :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"numPlayers\",\n          value: numPlayers,\n          onChange: handleNumPlayersChange,\n          children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num + 2,\n            children: num + 2\n          }, num + 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-names\",\n          children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Joueur ${index + 1}`,\n            value: name,\n            onChange: e => handlePlayerNameChange(e, index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-btn\",\n        onClick: handleStartGame,\n        children: \"Lancer le jeu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E2k4l0C+E4Zho4GngHxkMYkmHKQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WowGuy","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgeesDistribuees","setGorgeesDistribuees","gorgeesRecues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","showRecap","setShowRecap","waitingForConfirmation","setWaitingForConfirmation","showIntermediatePage","setShowIntermediatePage","suits","cardValues","generateCard","value","Math","floor","random","length","suit","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","card","alert","handlePlayerGuess","guess","handleColorGuess","handleComparisonGuess","handleInsideOutsideGuess","handleSuitGuess","isRed","newGorgeesRecues","savePlayerCard","newPlayerCards","previousCard","comparison","cards","isInside","min","map","max","handleNextTurn","nextTurn","distributeGorgees","toPlayer","amount","newSplitGorgees","totalDistributed","reduce","total","entry","newGorgeesDistribuees","forEach","nextPlayer","prev","newCard","renderRecap","children","i","join","fileName","_jsxFileName","lineNumber","columnNumber","handleContinueToRecap","className","onClick","src","alt","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([])); // Cartes tirées\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  \n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const cardValues = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Valet', 'Reine', 'Roi', 'As'];\n\n  const generateCard = () => {\n    const value = cardValues[Math.floor(Math.random() * cardValues.length)];\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return { value, suit };\n  };\n\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true);\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if ((guess === 'rouge' && isRed) || (guess === 'noir' && !isRed)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n\n  const savePlayerCard = () => {\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n  };\n\n  const handleComparisonGuess = (guess) => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n\n    if ((guess === 'supérieure' && comparison > 0) ||\n        (guess === 'inférieure' && comparison < 0) ||\n        (guess === 'égale' && comparison === 0)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n\n  const handleInsideOutsideGuess = (guess) => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) &&\n                     currentCard.value < Math.max(...cards.map(card => card.value));\n\n    if ((guess === 'intérieur' && isInside) || (guess === 'extérieur' && !isInside)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n\n  const handleSuitGuess = (guess) => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard();\n  };\n\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, { toPlayer, amount }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({ toPlayer, amount }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber((prev) => (prev % 4) + 1);\n    }\n\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  // Récap provisoire modifié pour afficher les cartes tirées par les joueurs\n  const renderRecap = () => {\n    return playerNames.map((name, index) => (\n      <p key={index}>\n        {name} : {playerCards[index].map((card, i) => `${card.value} de ${card.suit}`).join(', ')}\n      </p>\n    ));\n  };\n\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {startGame ? (\n        <div className=\"game\">\n          {showRecap ? (\n            <div>\n              <h2>Récapitulatif provisoire</h2>\n              {renderRecap()}\n              <button onClick={handleContinueToRecap}>On passe à la suite !</button>\n            </div>\n          ) : showIntermediatePage ? (\n            <div>\n              <h2>La première phase de jeu est terminée !</h2>\n              <p>Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !</p>\n              <button onClick={handleContinueToRecap}>Passer au récap provisoire avant la suite</button>\n            </div>\n          ) : (\n            <div>\n              <h2>{message}</h2>\n\n              {cardRevealed && (\n                <p>Carte révélée : {currentCard.value} de {currentCard.suit}</p>\n              )}\n\n              {playerCards[currentPlayer].length > 0 && (\n                <div>\n                  <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n                  {playerCards[currentPlayer].map((card, index) => (\n                    <p key={index}>\n                      {card.value} de {card.suit}\n                    </p>\n                  ))}\n                </div>\n              )}\n\n              {roundNumber === 1 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est rouge ou noire</h3>\n                  <button onClick={() => handlePlayerGuess('rouge')}>Rouge</button>\n                  <button onClick={() => handlePlayerGuess('noir')}>Noir</button>\n                </div>\n              )}\n\n              {roundNumber === 2 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est supérieure, inférieure ou égale à la première</h3>\n                  <button onClick={() => handlePlayerGuess('supérieure')}>Supérieure</button>\n                  <button onClick={() => handlePlayerGuess('inférieure')}>Inférieure</button>\n                  <button onClick={() => handlePlayerGuess('égale')}>Égale</button>\n                </div>\n              )}\n\n              {roundNumber === 3 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est à l'intérieur ou à l'extérieur des cartes précédentes</h3>\n                  <button onClick={() => handlePlayerGuess('intérieur')}>À l'intérieur</button>\n                  <button onClick={() => handlePlayerGuess('extérieur')}>À l'extérieur</button>\n                </div>\n              )}\n\n              {roundNumber === 4 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez la forme de la carte</h3>\n                  <button onClick={() => handlePlayerGuess('cœur')}>Cœur</button>\n                  <button onClick={() => handlePlayerGuess('carreau')}>Carreau</button>\n                  <button onClick={() => handlePlayerGuess('pique')}>Pique</button>\n                  <button onClick={() => handlePlayerGuess('trèfle')}>Trèfle</button>\n                </div>\n              )}\n\n              {showDistribution && (\n                <div>\n                  <h3>Distribuez vos gorgées ({gorgeesToDistribute} à répartir)</h3>\n                  {playerNames.map((name, index) => (\n                    index !== currentPlayer && (\n                      <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                        Donner 1 gorgée à {name}\n                      </button>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {waitingForConfirmation && (\n                <div>\n                  <button onClick={handleNextTurn}>J'ai bu, tour suivant</button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"player-setup\">\n          <h1 className=\"title\">L'Ardechoise</h1>\n          <img src={WowGuy} alt=\"WOW Guy\" className=\"wow-image\" />\n          <div className=\"player-selection\">\n            <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n            <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n              {[...Array(9).keys()].map((num) => (\n                <option key={num + 2} value={num + 2}>\n                  {num + 2}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"player-names\">\n              {playerNames.map((name, index) => (\n                <input\n                  key={index}\n                  type=\"text\"\n                  placeholder={`Joueur ${index + 1}`}\n                  value={name}\n                  onChange={(e) => handlePlayerNameChange(e, index)}\n                />\n              ))}\n            </div>\n          </div>\n\n          <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}