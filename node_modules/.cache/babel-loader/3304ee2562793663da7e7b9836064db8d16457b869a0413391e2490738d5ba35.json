{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck,\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [phase, setPhase] = useState(\"donne\"); // \"donne\" ou \"prend\"\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0); // Suivre qui donne\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(1); // On commence avec 1 gorgée à distribuer\n  const [playersWithCard, setPlayersWithCard] = useState([]); // Joueurs qui ont la carte tirée\n  const [message, setMessage] = useState(\"\");\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Trouver les joueurs qui ont cette carte\n    const playersWithThisCard = players.filter((_, index) => players[index].cards.some(playerCard => playerCard.value === card.value));\n    if (playersWithThisCard.length === 0) {\n      // Mode Hardcore : tirer une nouvelle carte si personne n'a la carte\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n      setTimeout(drawCard, 1500); // Attendre un peu avant de tirer une nouvelle carte\n    } else {\n      setPlayersWithCard(playersWithThisCard);\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n\n  // Fonction pour distribuer des gorgées pour un joueur à la fois\n  const handleDistributeGorgee = () => {\n    const currentPlayer = playersWithCard[currentGiverIndex];\n    updateGorgees(currentPlayer, gorgeesToDistribute);\n    setMessage(`${players[currentPlayer]} a distribué ${gorgeesToDistribute} gorgée(s).`);\n\n    // Passer au prochain joueur qui doit donner\n    if (currentGiverIndex < playersWithCard.length - 1) {\n      setCurrentGiverIndex(currentGiverIndex + 1);\n    } else {\n      // Une fois que tout le monde a distribué, passer à la phase \"prend\"\n      setPhase(\"prend\");\n      setCardRevealed(false); // Pour tirer une nouvelle carte pour \"prend\"\n    }\n  };\n\n  // Fonction pour confirmer que le joueur a bu (phase \"prend\")\n  const handlePlayerHasDrunk = playerIndex => {\n    updateGorgees(playerIndex, gorgeesToDistribute);\n    setMessage(`${players[playerIndex]} a bu ${gorgeesToDistribute} gorgée(s).`);\n    if (phase === \"prend\") {\n      endDonnePrendPhase(); // Passer au tour suivant\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phase Donne/Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), phase === \"donne\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Je donne \", gorgeesToDistribute, \" gorg\\xE9e(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawCard,\n        children: \"Tirer une carte\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), playersWithCard.length > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDistributeGorgee,\n          children: [players[playersWithCard[currentGiverIndex]], \" doit distribuer\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), phase === \"prend\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Je prends \", gorgeesToDistribute, \" gorg\\xE9e(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawCard,\n        children: \"Tirer une carte\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), playersWithCard.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: playersWithCard.map(playerIndex => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerHasDrunk(playerIndex),\n            children: [players[playerIndex], \" a bu\"]\n          }, playerIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"f1LfNiFi5FIHGFDXEAayKgxPJ/k=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","DonnePrendPhase","players","remainingDeck","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","phase","setPhase","currentGiverIndex","setCurrentGiverIndex","gorgeesToDistribute","setGorgeesToDistribute","playersWithCard","setPlayersWithCard","message","setMessage","drawCard","length","newDeck","card","pop","value","suit","playersWithThisCard","filter","_","index","cards","some","playerCard","setTimeout","handleDistributeGorgee","currentPlayer","handlePlayerHasDrunk","playerIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck, updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [phase, setPhase] = useState(\"donne\"); // \"donne\" ou \"prend\"\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0); // Suivre qui donne\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(1); // On commence avec 1 gorgée à distribuer\n  const [playersWithCard, setPlayersWithCard] = useState([]); // Joueurs qui ont la carte tirée\n  const [message, setMessage] = useState(\"\");\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Trouver les joueurs qui ont cette carte\n    const playersWithThisCard = players.filter((_, index) =>\n      players[index].cards.some((playerCard) => playerCard.value === card.value)\n    );\n\n    if (playersWithThisCard.length === 0) {\n      // Mode Hardcore : tirer une nouvelle carte si personne n'a la carte\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n      setTimeout(drawCard, 1500); // Attendre un peu avant de tirer une nouvelle carte\n    } else {\n      setPlayersWithCard(playersWithThisCard);\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n\n  // Fonction pour distribuer des gorgées pour un joueur à la fois\n  const handleDistributeGorgee = () => {\n    const currentPlayer = playersWithCard[currentGiverIndex];\n    updateGorgees(currentPlayer, gorgeesToDistribute);\n\n    setMessage(`${players[currentPlayer]} a distribué ${gorgeesToDistribute} gorgée(s).`);\n\n    // Passer au prochain joueur qui doit donner\n    if (currentGiverIndex < playersWithCard.length - 1) {\n      setCurrentGiverIndex(currentGiverIndex + 1);\n    } else {\n      // Une fois que tout le monde a distribué, passer à la phase \"prend\"\n      setPhase(\"prend\");\n      setCardRevealed(false); // Pour tirer une nouvelle carte pour \"prend\"\n    }\n  };\n\n  // Fonction pour confirmer que le joueur a bu (phase \"prend\")\n  const handlePlayerHasDrunk = (playerIndex) => {\n    updateGorgees(playerIndex, gorgeesToDistribute);\n    setMessage(`${players[playerIndex]} a bu ${gorgeesToDistribute} gorgée(s).`);\n\n    if (phase === \"prend\") {\n      endDonnePrendPhase(); // Passer au tour suivant\n    }\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase Donne/Prend</h1>\n\n      {phase === \"donne\" && (\n        <>\n          <h2>Je donne {gorgeesToDistribute} gorgée(s)</h2>\n          {!cardRevealed ? (\n            <button onClick={drawCard}>Tirer une carte</button>\n          ) : (\n            <div>\n              <p>{message}</p>\n              {playersWithCard.length > 0 ? (\n                <button onClick={handleDistributeGorgee}>\n                  {players[playersWithCard[currentGiverIndex]]} doit distribuer\n                </button>\n              ) : null}\n            </div>\n          )}\n        </>\n      )}\n\n      {phase === \"prend\" && (\n        <>\n          <h2>Je prends {gorgeesToDistribute} gorgée(s)</h2>\n          {!cardRevealed ? (\n            <button onClick={drawCard}>Tirer une carte</button>\n          ) : (\n            <div>\n              <p>{message}</p>\n              {playersWithCard.length > 0 ? (\n                <div>\n                  {playersWithCard.map((playerIndex) => (\n                    <button key={playerIndex} onClick={() => handlePlayerHasDrunk(playerIndex)}>\n                      {players[playerIndex]} a bu\n                    </button>\n                  ))}\n                </div>\n              ) : null}\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}