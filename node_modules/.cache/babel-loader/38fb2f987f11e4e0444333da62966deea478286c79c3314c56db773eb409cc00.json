{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./app.css\";\nimport WowGuy from \"./assets/images/WowGuy.webp\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(\"\"));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState(\"\");\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const [deck, setDeck] = useState([]);\n  const suits = [\"cœur\", \"carreau\", \"pique\", \"trèfle\"];\n\n  // Function to convert numeric value to card name\n  const getCardValue = value => {\n    switch (value) {\n      case 11:\n        return \"Valet\";\n      case 12:\n        return \"Dame\";\n      case 13:\n        return \"Roi\";\n      case 14:\n        return \"As\";\n      default:\n        return value;\n    }\n  };\n  const getSymbolForSuit = suit => {\n    switch (suit) {\n      case \"pique\":\n        return \"♠\";\n      case \"trèfle\":\n        return \"♣\";\n      case \"cœur\":\n        return \"♥\";\n      case \"carreau\":\n        return \"♦\";\n      default:\n        return suit;\n    }\n  };\n  useEffect(() => {\n    initializeDeck();\n  }, []);\n  const initializeDeck = () => {\n    const newDeck = [];\n    suits.forEach(suit => {\n      for (let value = 2; value <= 14; value++) {\n        newDeck.push({\n          value,\n          suit\n        });\n      }\n    });\n    setDeck(shuffle(newDeck));\n  };\n  const shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const drawCard = () => {\n    if (deck.length === 0) return null;\n    const newDeck = [...deck];\n    const card = newDeck.pop();\n    setDeck(newDeck);\n    return card;\n  };\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(\"\"));\n    setPlayerCards(Array(value).fill([]));\n  };\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== \"\")) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = drawCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert(\"Veuillez remplir tous les noms des joueurs.\");\n    }\n  };\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true);\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === \"cœur\" || currentCard.suit === \"carreau\";\n    if (guess === \"rouge\" && isRed || guess === \"noir\" && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleComparisonGuess = guess => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n    if (guess === \"supérieure\" && comparison > 0 || guess === \"inférieure\" && comparison < 0 || guess === \"égale\" && comparison === 0) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleInsideOutsideGuess = guess => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) && currentCard.value < Math.max(...cards.map(card => card.value));\n    if (guess === \"intérieur\" && isInside || guess === \"extérieur\" && !isInside) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleSuitGuess = guess => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, {\n      toPlayer,\n      amount\n    }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({\n        toPlayer,\n        amount\n      }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber(prev => prev % 4 + 1);\n    }\n    const newCard = drawCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  // Rendering recap with gorgées AND the cards drawn\n  const renderRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [name, \" a distribu\\xE9 \", gorgeesDistribuees[index], \" gorg\\xE9es et a bu\", \" \", gorgeesRecues[index], \" gorg\\xE9es.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cartes tir\\xE9es :\", \" \", playerCards[index].map((card, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [getCardValue(card.value), \" de \", getSymbolForSuit(card.suit), \",\", \" \"]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this));\n  };\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: startGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: showRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this), renderRecap()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }, this) : showIntermediatePage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"La premi\\xE8re phase de jeu est termin\\xE9e !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueToRecap,\n          children: \"Passer au r\\xE9cap provisoire avant la suite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 15\n        }, this), cardRevealed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", getCardValue(currentCard.value), \" de\", \" \", getSymbolForSuit(currentCard.suit)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 17\n        }, this), playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 19\n          }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [getCardValue(card.value), \" de \", getSymbolForSuit(card.suit)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 17\n        }, this), roundNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est rouge ou noire\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"rouge\"),\n            children: \"Rouge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"noir\"),\n            children: \"Noir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 17\n        }, this), roundNumber === 2 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"supérieure\"),\n            children: \"Sup\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"inférieure\"),\n            children: \"Inf\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"égale\"),\n            children: \"\\xC9gale\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 17\n        }, this), roundNumber === 3 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est \\xE0 l'int\\xE9rieur ou \\xE0 l'ext\\xE9rieur des cartes pr\\xE9c\\xE9dentes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"intérieur\"),\n            children: \"\\xC0 l'int\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"extérieur\"),\n            children: \"\\xC0 l'ext\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 17\n        }, this), roundNumber === 4 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez la forme de la carte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"cœur\"),\n            children: \"C\\u0153ur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"carreau\"),\n            children: \"Carreau\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"pique\"),\n            children: \"Pique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess(\"trèfle\"),\n            children: \"Tr\\xE8fle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 17\n        }, this), showDistribution && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 19\n          }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => distributeGorgees(index, 1),\n            children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 17\n        }, this), waitingForConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextTurn,\n            children: \"J'ai bu, tour suivant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"L'Ardechoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: WowGuy,\n        alt: \"WOW Guy\",\n        className: \"wow-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPlayers\",\n          children: \"Nombre de joueurs :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"numPlayers\",\n          value: numPlayers,\n          onChange: handleNumPlayersChange,\n          children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num + 2,\n            children: num + 2\n          }, num + 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-names\",\n          children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Joueur ${index + 1}`,\n            value: name,\n            onChange: e => handlePlayerNameChange(e, index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-btn\",\n        onClick: handleStartGame,\n        children: \"Lancer le jeu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ObHoFVraylboHslykA4tk+o7cCE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WowGuy","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgeesDistribuees","setGorgeesDistribuees","gorgeesRecues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","showRecap","setShowRecap","waitingForConfirmation","setWaitingForConfirmation","showIntermediatePage","setShowIntermediatePage","deck","setDeck","suits","getCardValue","value","getSymbolForSuit","suit","initializeDeck","newDeck","forEach","push","shuffle","array","i","length","j","Math","floor","random","drawCard","card","pop","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","alert","handlePlayerGuess","guess","handleColorGuess","handleComparisonGuess","handleInsideOutsideGuess","handleSuitGuess","isRed","newGorgeesRecues","previousCard","comparison","cards","isInside","min","map","max","handleNextTurn","nextTurn","distributeGorgees","toPlayer","amount","newSplitGorgees","totalDistributed","reduce","total","entry","newGorgeesDistribuees","nextPlayer","newPlayerCards","prev","newCard","renderRecap","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","handleContinueToRecap","className","onClick","src","alt","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./app.css\";\nimport WowGuy from \"./assets/images/WowGuy.webp\";\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(\"\"));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState(\"\");\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(\n    Array(numPlayers).fill(0)\n  );\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const [deck, setDeck] = useState([]);\n\n  const suits = [\"cœur\", \"carreau\", \"pique\", \"trèfle\"];\n  \n  // Function to convert numeric value to card name\n  const getCardValue = (value) => {\n    switch (value) {\n      case 11:\n        return \"Valet\";\n      case 12:\n        return \"Dame\";\n      case 13:\n        return \"Roi\";\n      case 14:\n        return \"As\";\n      default:\n        return value;\n    }\n  };\n\n  const getSymbolForSuit = (suit) => {\n    switch (suit) {\n      case \"pique\":\n        return \"♠\";\n      case \"trèfle\":\n        return \"♣\";\n      case \"cœur\":\n        return \"♥\";\n      case \"carreau\":\n        return \"♦\";\n      default:\n        return suit;\n    }\n  };\n\n  useEffect(() => {\n    initializeDeck();\n  }, []);\n\n  const initializeDeck = () => {\n    const newDeck = [];\n    suits.forEach((suit) => {\n      for (let value = 2; value <= 14; value++) {\n        newDeck.push({ value, suit });\n      }\n    });\n    setDeck(shuffle(newDeck));\n  };\n\n  const shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  const drawCard = () => {\n    if (deck.length === 0) return null;\n    const newDeck = [...deck];\n    const card = newDeck.pop();\n    setDeck(newDeck);\n    return card;\n  };\n\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(\"\"));\n    setPlayerCards(Array(value).fill([]));\n  };\n\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  const handleStartGame = () => {\n    if (playerNames.every((name) => name.trim() !== \"\")) {\n      setStartGame(true);\n      setMessage(\n        `${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`\n      );\n      const card = drawCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert(\"Veuillez remplir tous les noms des joueurs.\");\n    }\n  };\n\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true);\n\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === \"cœur\" || currentCard.suit === \"carreau\";\n    if ((guess === \"rouge\" && isRed) || (guess === \"noir\" && !isRed)) {\n      setMessage(\n        `${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`\n      );\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(\n        `Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`\n      );\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleComparisonGuess = (guess) => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n\n    if (\n      (guess === \"supérieure\" && comparison > 0) ||\n      (guess === \"inférieure\" && comparison < 0) ||\n      (guess === \"égale\" && comparison === 0)\n    ) {\n      setMessage(\n        `${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`\n      );\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(\n        `Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`\n      );\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleInsideOutsideGuess = (guess) => {\n    const cards = playerCards[currentPlayer];\n    const isInside =\n      currentCard.value > Math.min(...cards.map((card) => card.value)) &&\n      currentCard.value < Math.max(...cards.map((card) => card.value));\n\n    if (\n      (guess === \"intérieur\" && isInside) ||\n      (guess === \"extérieur\" && !isInside)\n    ) {\n      setMessage(\n        `${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`\n      );\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(\n        `Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`\n      );\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleSuitGuess = (guess) => {\n    if (guess === currentCard.suit) {\n      setMessage(\n        `${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`\n      );\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(\n        `Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`\n      );\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, { toPlayer, amount }];\n    let totalDistributed = newSplitGorgees.reduce(\n      (total, entry) => total + entry.amount,\n      0\n    );\n\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\n        \"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\"\n      );\n      return;\n    }\n\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({ toPlayer, amount }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [\n      ...newPlayerCards[currentPlayer],\n      currentCard,\n    ];\n    setPlayerCards(newPlayerCards);\n\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber((prev) => (prev % 4) + 1);\n    }\n\n    const newCard = drawCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(\n      `${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`\n    );\n  };\n\n  // Rendering recap with gorgées AND the cards drawn\n  const renderRecap = () => {\n    return playerNames.map((name, index) => (\n      <div key={index}>\n        <p>\n          {name} a distribué {gorgeesDistribuees[index]} gorgées et a bu{\" \"}\n          {gorgeesRecues[index]} gorgées.\n        </p>\n        <p>\n          Cartes tirées :{\" \"}\n          {playerCards[index].map((card, idx) => (\n            <span key={idx}>\n              {getCardValue(card.value)} de {getSymbolForSuit(card.suit)},{\" \"}\n            </span>\n          ))}\n        </p>\n      </div>\n    ));\n  };\n\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {startGame ? (\n        <div className=\"game\">\n          {showRecap ? (\n            <div>\n              <h2>Récapitulatif final</h2>\n              {renderRecap()}\n            </div>\n          ) : showIntermediatePage ? (\n            <div>\n              <h2>La première phase de jeu est terminée !</h2>\n              <p>\n                Vous pouvez reposer vos foies... Mais pas trop longtemps car la\n                suite arrive !\n              </p>\n              <button onClick={handleContinueToRecap}>\n                Passer au récap provisoire avant la suite\n              </button>\n            </div>\n          ) : (\n            <div>\n              <h2>{message}</h2>\n\n              {cardRevealed && (\n                <p>\n                  Carte révélée : {getCardValue(currentCard.value)} de{\" \"}\n                  {getSymbolForSuit(currentCard.suit)}\n                </p>\n              )}\n\n              {playerCards[currentPlayer].length > 0 && (\n                <div>\n                  <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n                  {playerCards[currentPlayer].map((card, index) => (\n                    <p key={index}>\n                      {getCardValue(card.value)} de {getSymbolForSuit(card.suit)}\n                    </p>\n                  ))}\n                </div>\n              )}\n\n              {roundNumber === 1 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est rouge ou noire</h3>\n                  <button onClick={() => handlePlayerGuess(\"rouge\")}>\n                    Rouge\n                  </button>\n                  <button onClick={() => handlePlayerGuess(\"noir\")}>Noir</button>\n                </div>\n              )}\n\n              {roundNumber === 2 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>\n                    Devinez si la carte est supérieure, inférieure ou égale à la\n                    première\n                  </h3>\n                  <button onClick={() => handlePlayerGuess(\"supérieure\")}>\n                    Supérieure\n                  </button>\n                  <button onClick={() => handlePlayerGuess(\"inférieure\")}>\n                    Inférieure\n                  </button>\n                  <button onClick={() => handlePlayerGuess(\"égale\")}>Égale</button>\n                </div>\n              )}\n\n              {roundNumber === 3 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>\n                    Devinez si la carte est à l'intérieur ou à l'extérieur des\n                    cartes précédentes\n                  </h3>\n                  <button onClick={() => handlePlayerGuess(\"intérieur\")}>\n                    À l'intérieur\n                  </button>\n                  <button onClick={() => handlePlayerGuess(\"extérieur\")}>\n                    À l'extérieur\n                  </button>\n                </div>\n              )}\n\n              {roundNumber === 4 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez la forme de la carte</h3>\n                  <button onClick={() => handlePlayerGuess(\"cœur\")}>Cœur</button>\n                  <button onClick={() => handlePlayerGuess(\"carreau\")}>\n                    Carreau\n                  </button>\n                  <button onClick={() => handlePlayerGuess(\"pique\")}>Pique</button>\n                  <button onClick={() => handlePlayerGuess(\"trèfle\")}>\n                    Trèfle\n                  </button>\n                </div>\n              )}\n\n              {showDistribution && (\n                <div>\n                  <h3>\n                    Distribuez vos gorgées ({gorgeesToDistribute} à répartir)\n                  </h3>\n                  {playerNames.map(\n                    (name, index) =>\n                      index !== currentPlayer && (\n                        <button\n                          key={index}\n                          onClick={() => distributeGorgees(index, 1)}\n                        >\n                          Donner 1 gorgée à {name}\n                        </button>\n                      )\n                  )}\n                </div>\n              )}\n\n              {waitingForConfirmation && (\n                <div>\n                  <button onClick={handleNextTurn}>\n                    J'ai bu, tour suivant\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"player-setup\">\n          <h1 className=\"title\">L'Ardechoise</h1>\n          <img src={WowGuy} alt=\"WOW Guy\" className=\"wow-image\" />\n          <div className=\"player-selection\">\n            <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n            <select\n              id=\"numPlayers\"\n              value={numPlayers}\n              onChange={handleNumPlayersChange}\n            >\n              {[...Array(9).keys()].map((num) => (\n                <option key={num + 2} value={num + 2}>\n                  {num + 2}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"player-names\">\n              {playerNames.map((name, index) => (\n                <input\n                  key={index}\n                  type=\"text\"\n                  placeholder={`Joueur ${index + 1}`}\n                  value={name}\n                  onChange={(e) => handlePlayerNameChange(e, index)}\n                />\n              ))}\n            </div>\n          </div>\n\n          <button className=\"start-game-btn\" onClick={handleStartGame}>\n            Lancer le jeu\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}