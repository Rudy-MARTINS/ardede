{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Composant pour la phase Donne/Prend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  playerCards,\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [message, setMessage] = useState('');\n  const suits = [\"♠\", \"♣\", \"♥\", \"♦\"];\n\n  // Fonction pour tirer une carte\n  const drawCard = () => {\n    const value = Math.floor(Math.random() * 13) + 2; // Cartes 2 à As\n    const suit = suits[Math.floor(Math.random() * 4)];\n    setCurrentCard({\n      value,\n      suit\n    });\n    setCardRevealed(true);\n  };\n  const handleNextTurn = () => {\n    setCardRevealed(false);\n    setCurrentPlayer(prevPlayer => (prevPlayer + 1) % players.length);\n    setMessage(`${players[currentPlayer]} c'est à toi !`);\n  };\n\n  // Fonction pour vérifier si un joueur a la même carte\n  const checkPlayerCardMatch = () => {\n    const playerMatch = playerCards[currentPlayer].some(card => card.value === currentCard.value && card.suit === currentCard.suit);\n    if (playerMatch) {\n      const doubleGorgees = playerCards[currentPlayer].filter(card => card.value === currentCard.value).length === 2;\n      const gorgées = doubleGorgees ? 2 : 1;\n      updateGorgees(currentPlayer, gorgées);\n      setMessage(`${players[currentPlayer]} distribue/prend ${gorgées} gorgée(s) !`);\n    } else {\n      setMessage(`${players[currentPlayer]} n'a pas de carte correspondante.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phase Donne / Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: drawCard,\n      children: \"Tirer une carte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Carte tir\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkPlayerCardMatch,\n        children: \"Valider la carte\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextTurn,\n        children: \"Passer au joueur suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"f9xRlmoGMB0EggMMhRzzMfUzIYY=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DonnePrendPhase","players","playerCards","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","currentPlayer","setCurrentPlayer","message","setMessage","suits","drawCard","value","Math","floor","random","suit","handleNextTurn","prevPlayer","length","checkPlayerCardMatch","playerMatch","some","card","doubleGorgees","filter","gorgées","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState } from \"react\";\n\n// Composant pour la phase Donne/Prend\nconst DonnePrendPhase = ({ players, playerCards, updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [message, setMessage] = useState('');\n\n  const suits = [\"♠\", \"♣\", \"♥\", \"♦\"];\n\n  // Fonction pour tirer une carte\n  const drawCard = () => {\n    const value = Math.floor(Math.random() * 13) + 2; // Cartes 2 à As\n    const suit = suits[Math.floor(Math.random() * 4)];\n    setCurrentCard({ value, suit });\n    setCardRevealed(true);\n  };\n\n  const handleNextTurn = () => {\n    setCardRevealed(false);\n    setCurrentPlayer((prevPlayer) => (prevPlayer + 1) % players.length);\n    setMessage(`${players[currentPlayer]} c'est à toi !`);\n  };\n\n  // Fonction pour vérifier si un joueur a la même carte\n  const checkPlayerCardMatch = () => {\n    const playerMatch = playerCards[currentPlayer].some(\n      (card) => card.value === currentCard.value && card.suit === currentCard.suit\n    );\n\n    if (playerMatch) {\n      const doubleGorgees = playerCards[currentPlayer].filter(\n        (card) => card.value === currentCard.value\n      ).length === 2;\n\n      const gorgées = doubleGorgees ? 2 : 1;\n      updateGorgees(currentPlayer, gorgées);\n      setMessage(`${players[currentPlayer]} distribue/prend ${gorgées} gorgée(s) !`);\n    } else {\n      setMessage(`${players[currentPlayer]} n'a pas de carte correspondante.`);\n    }\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h2>Phase Donne / Prend</h2>\n      {!cardRevealed ? (\n        <button onClick={drawCard}>Tirer une carte</button>\n      ) : (\n        <div>\n          <p>Carte tirée : {currentCard.value} de {currentCard.suit}</p>\n          <button onClick={checkPlayerCardMatch}>Valider la carte</button>\n          <button onClick={handleNextTurn}>Passer au joueur suivant</button>\n        </div>\n      )}\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}