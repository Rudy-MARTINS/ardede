{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n\n  // Phase Donne / Prend\n  const [donnePrendPhase, setDonnePrendPhase] = useState(false);\n  const [donnePrendAlternance, setDonnePrendAlternance] = useState('donne'); // Alternance entre donne et prend\n  const [culSecPhase, setCulSecPhase] = useState(false); // Phase cul sec\n  const [showFinalRecap, setShowFinalRecap] = useState(false); // Récapitulatif final\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return {\n      value,\n      suit\n    };\n  };\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true);\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if (guess === 'rouge' && isRed || guess === 'noir' && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleComparisonGuess = guess => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n    if (guess === 'supérieure' && comparison > 0 || guess === 'inférieure' && comparison < 0 || guess === 'égale' && comparison === 0) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleInsideOutsideGuess = guess => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) && currentCard.value < Math.max(...cards.map(card => card.value));\n    if (guess === 'intérieur' && isInside || guess === 'extérieur' && !isInside) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleSuitGuess = guess => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, {\n      toPlayer,\n      amount\n    }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({\n        toPlayer,\n        amount\n      }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowRecap(true);\n        return;\n      }\n      setRoundNumber(prev => prev % 4 + 1);\n    }\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n  const handleDonnePrend = () => {\n    setDonnePrendPhase(true);\n    setMessage(\"Donne ou Prend, MJ fait ton choix !\");\n  };\n  const handleDonnePrendChoice = choice => {\n    setDonnePrendAlternance(choice);\n    setCulSecPhase(false);\n  };\n  const handleNextDonnePrend = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    setCurrentPlayer(nextPlayer);\n    if (donnePrendAlternance === 'donne') {\n      setMessage(`${playerNames[currentPlayer]} doit donner des gorgées.`);\n    } else if (donnePrendAlternance === 'prend') {\n      setMessage(`${playerNames[currentPlayer]} doit prendre des gorgées.`);\n    }\n    if (nextPlayer === 0) {\n      if (culSecPhase) {\n        setMessage(\"Cul sec ! C'est la dernière carte.\");\n        setShowFinalRecap(true);\n      } else {\n        setDonnePrendAlternance(donnePrendAlternance === 'donne' ? 'prend' : 'donne');\n      }\n    }\n  };\n  const renderFinalRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [name, \" a distribu\\xE9 \", gorgeesDistribuees[index], \" gorg\\xE9es et a bu \", gorgeesRecues[index], \" gorg\\xE9es.\"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: startGame ? donnePrendPhase ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDonnePrendChoice('donne'),\n        children: \"Donne\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDonnePrendChoice('prend'),\n        children: \"Prend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextDonnePrend,\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }, this) : showFinalRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"R\\xE9capitulatif final\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }, this), renderFinalRecap()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }, this) : showRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"R\\xE9capitulatif des devinettes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }, this), playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [name, \" a distribu\\xE9 \", gorgeesDistribuees[index], \" gorg\\xE9es et a bu \", gorgeesRecues[index], \" gorg\\xE9es.\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 15\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDonnePrend,\n        children: \"Passer \\xE0 Donne/Prend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }, this), cardRevealed && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 15\n      }, this), playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 17\n        }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [card.value, \" de \", card.suit]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 19\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 15\n      }, this), roundNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est rouge ou noire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('rouge'),\n          children: \"Rouge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('noir'),\n          children: \"Noir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 15\n      }, this), roundNumber === 2 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('supérieure'),\n          children: \"Sup\\xE9rieure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('inférieure'),\n          children: \"Inf\\xE9rieure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('égale'),\n          children: \"\\xC9gale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 15\n      }, this), roundNumber === 3 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est \\xE0 l'int\\xE9rieur ou \\xE0 l'ext\\xE9rieur des cartes pr\\xE9c\\xE9dentes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('intérieur'),\n          children: \"\\xC0 l'int\\xE9rieur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('extérieur'),\n          children: \"\\xC0 l'ext\\xE9rieur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 15\n      }, this), roundNumber === 4 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez la forme de la carte\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('cœur'),\n          children: \"C\\u0153ur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('carreau'),\n          children: \"Carreau\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('pique'),\n          children: \"Pique\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('trèfle'),\n          children: \"Tr\\xE8fle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 15\n      }, this), showDistribution && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => distributeGorgees(index, 1),\n          children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 15\n      }, this), waitingForConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextTurn,\n          children: \"J'ai bu, tour suivant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"L'Ardechoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: WowGuy,\n        alt: \"WOW Guy\",\n        className: \"wow-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPlayers\",\n          children: \"Nombre de joueurs :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"numPlayers\",\n          value: numPlayers,\n          onChange: handleNumPlayersChange,\n          children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num + 2,\n            children: num + 2\n          }, num + 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-names\",\n          children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Joueur ${index + 1}`,\n            value: name,\n            onChange: e => handlePlayerNameChange(e, index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-btn\",\n        onClick: handleStartGame,\n        children: \"Lancer le jeu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uYvth6SGeZcjmCIfoK9aj6k7qE4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WowGuy","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgeesDistribuees","setGorgeesDistribuees","gorgeesRecues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","showRecap","setShowRecap","waitingForConfirmation","setWaitingForConfirmation","donnePrendPhase","setDonnePrendPhase","donnePrendAlternance","setDonnePrendAlternance","culSecPhase","setCulSecPhase","showFinalRecap","setShowFinalRecap","suits","generateCard","value","Math","floor","random","suit","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","card","alert","handlePlayerGuess","guess","handleColorGuess","handleComparisonGuess","handleInsideOutsideGuess","handleSuitGuess","isRed","newGorgeesRecues","previousCard","comparison","cards","isInside","min","map","max","handleNextTurn","nextTurn","distributeGorgees","toPlayer","amount","newSplitGorgees","totalDistributed","reduce","total","entry","newGorgeesDistribuees","forEach","nextPlayer","newPlayerCards","prev","newCard","handleDonnePrend","handleDonnePrendChoice","choice","handleNextDonnePrend","renderFinalRecap","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","length","src","alt","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n\n  // Phase Donne / Prend\n  const [donnePrendPhase, setDonnePrendPhase] = useState(false);\n  const [donnePrendAlternance, setDonnePrendAlternance] = useState('donne'); // Alternance entre donne et prend\n  const [culSecPhase, setCulSecPhase] = useState(false); // Phase cul sec\n  const [showFinalRecap, setShowFinalRecap] = useState(false); // Récapitulatif final\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return { value, suit };\n  };\n\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true);\n\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if ((guess === 'rouge' && isRed) || (guess === 'noir' && !isRed)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleComparisonGuess = (guess) => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n\n    if ((guess === 'supérieure' && comparison > 0) ||\n        (guess === 'inférieure' && comparison < 0) ||\n        (guess === 'égale' && comparison === 0)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleInsideOutsideGuess = (guess) => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) &&\n                     currentCard.value < Math.max(...cards.map(card => card.value));\n\n    if ((guess === 'intérieur' && isInside) || (guess === 'extérieur' && !isInside)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleSuitGuess = (guess) => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, { toPlayer, amount }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({ toPlayer, amount }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowRecap(true);\n        return;\n      }\n      setRoundNumber((prev) => (prev % 4) + 1);\n    }\n\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  const handleDonnePrend = () => {\n    setDonnePrendPhase(true);\n    setMessage(\"Donne ou Prend, MJ fait ton choix !\");\n  };\n\n  const handleDonnePrendChoice = (choice) => {\n    setDonnePrendAlternance(choice);\n    setCulSecPhase(false);\n  };\n\n  const handleNextDonnePrend = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    setCurrentPlayer(nextPlayer);\n\n    if (donnePrendAlternance === 'donne') {\n      setMessage(`${playerNames[currentPlayer]} doit donner des gorgées.`);\n    } else if (donnePrendAlternance === 'prend') {\n      setMessage(`${playerNames[currentPlayer]} doit prendre des gorgées.`);\n    }\n\n    if (nextPlayer === 0) {\n      if (culSecPhase) {\n        setMessage(\"Cul sec ! C'est la dernière carte.\");\n        setShowFinalRecap(true);\n      } else {\n        setDonnePrendAlternance(donnePrendAlternance === 'donne' ? 'prend' : 'donne');\n      }\n    }\n  };\n\n  const renderFinalRecap = () => {\n    return playerNames.map((name, index) => (\n      <p key={index}>\n        {name} a distribué {gorgeesDistribuees[index]} gorgées et a bu {gorgeesRecues[index]} gorgées.\n      </p>\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      {startGame ? (\n        donnePrendPhase ? (\n          <div>\n            <h2>{message}</h2>\n            <button onClick={() => handleDonnePrendChoice('donne')}>Donne</button>\n            <button onClick={() => handleDonnePrendChoice('prend')}>Prend</button>\n            <button onClick={handleNextDonnePrend}>Suivant</button>\n          </div>\n        ) : showFinalRecap ? (\n          <div>\n            <h2>Récapitulatif final</h2>\n            {renderFinalRecap()}\n          </div>\n        ) : showRecap ? (\n          <div>\n            <h2>Récapitulatif des devinettes</h2>\n            {playerNames.map((name, index) => (\n              <p key={index}>\n                {name} a distribué {gorgeesDistribuees[index]} gorgées et a bu {gorgeesRecues[index]} gorgées.\n              </p>\n            ))}\n            <button onClick={handleDonnePrend}>Passer à Donne/Prend</button>\n          </div>\n        ) : (\n          <div>\n            <h2>{message}</h2>\n\n            {cardRevealed && (\n              <p>Carte révélée : {currentCard.value} de {currentCard.suit}</p>\n            )}\n\n            {playerCards[currentPlayer].length > 0 && (\n              <div>\n                <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n                {playerCards[currentPlayer].map((card, index) => (\n                  <p key={index}>\n                    {card.value} de {card.suit}\n                  </p>\n                ))}\n              </div>\n            )}\n\n            {roundNumber === 1 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez si la carte est rouge ou noire</h3>\n                <button onClick={() => handlePlayerGuess('rouge')}>Rouge</button>\n                <button onClick={() => handlePlayerGuess('noir')}>Noir</button>\n              </div>\n            )}\n\n            {roundNumber === 2 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez si la carte est supérieure, inférieure ou égale à la première</h3>\n                <button onClick={() => handlePlayerGuess('supérieure')}>Supérieure</button>\n                <button onClick={() => handlePlayerGuess('inférieure')}>Inférieure</button>\n                <button onClick={() => handlePlayerGuess('égale')}>Égale</button>\n              </div>\n            )}\n\n            {roundNumber === 3 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez si la carte est à l'intérieur ou à l'extérieur des cartes précédentes</h3>\n                <button onClick={() => handlePlayerGuess('intérieur')}>À l'intérieur</button>\n                <button onClick={() => handlePlayerGuess('extérieur')}>À l'extérieur</button>\n              </div>\n            )}\n\n            {roundNumber === 4 && !showDistribution && !cardRevealed && (\n              <div>\n                <h3>Devinez la forme de la carte</h3>\n                <button onClick={() => handlePlayerGuess('cœur')}>Cœur</button>\n                <button onClick={() => handlePlayerGuess('carreau')}>Carreau</button>\n                <button onClick={() => handlePlayerGuess('pique')}>Pique</button>\n                <button onClick={() => handlePlayerGuess('trèfle')}>Trèfle</button>\n              </div>\n            )}\n\n            {showDistribution && (\n              <div>\n                <h3>Distribuez vos gorgées ({gorgeesToDistribute} à répartir)</h3>\n                {playerNames.map((name, index) => (\n                  index !== currentPlayer && (\n                    <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                      Donner 1 gorgée à {name}\n                    </button>\n                  )\n                ))}\n              </div>\n            )}\n\n            {waitingForConfirmation && (\n              <div>\n                <button onClick={handleNextTurn}>J'ai bu, tour suivant</button>\n              </div>\n            )}\n          </div>\n        )\n      ) : (\n        <div className=\"player-setup\">\n          <h1 className=\"title\">L'Ardechoise</h1>\n          <img src={WowGuy} alt=\"WOW Guy\" className=\"wow-image\" />\n          <div className=\"player-selection\">\n            <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n            <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n              {[...Array(9).keys()].map((num) => (\n                <option key={num + 2} value={num + 2}>\n                  {num + 2}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"player-names\">\n              {playerNames.map((name, index) => (\n                <input\n                  key={index}\n                  type=\"text\"\n                  placeholder={`Joueur ${index + 1}`}\n                  value={name}\n                  onChange={(e) => handlePlayerNameChange(e, index)}\n                />\n              ))}\n            </div>\n          </div>\n\n          <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}