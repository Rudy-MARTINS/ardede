{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\n\n// Fonction pour afficher un icône de carte\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardIcon = ({\n  value,\n  suit\n}) => {\n  const suitSymbols = {\n    'cœur': '♥️',\n    'carreau': '♦️',\n    'pique': '♠️',\n    'trèfle': '♣️'\n  };\n  const color = suit === 'cœur' || suit === 'carreau' ? 'red' : 'black';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'inline-block',\n      margin: '5px',\n      color\n    },\n    children: [value, \" \", suitSymbols[suit]]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = CardIcon;\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return {\n      value,\n      suit\n    };\n  };\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false); // Reset de l'état de carte révélée à chaque début de tour\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true); // Carte révélée\n\n    // Ajout des cartes dans le tableau de chaque joueur\n    const newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    // Gérer la distribution ou la perte de gorgées\n    if (guess === 'rouge' && (currentCard.suit === 'cœur' || currentCard.suit === 'carreau') || guess === 'noir' && (currentCard.suit === 'pique' || currentCard.suit === 'trèfle')) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, {\n      toPlayer,\n      amount\n    }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({\n        toPlayer,\n        amount\n      }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn(); // Utiliser la fonction nextTurn\n  };\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber(prev => prev % 4 + 1);\n    }\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false); // Reset pour la prochaine carte\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n  const renderRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [name, \" :\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), playerCards[index].map((card, cardIndex) => /*#__PURE__*/_jsxDEV(CardIcon, {\n        value: card.value,\n        suit: card.suit\n      }, cardIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this));\n  };\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: startGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: showRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif provisoire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this), renderRecap(), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert(\"Phase suivante bientôt\"),\n          children: \"On passe \\xE0 la suite !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this) : showIntermediatePage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"La premi\\xE8re phase de jeu est termin\\xE9e !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueToRecap,\n          children: \"Passer au r\\xE9cap provisoire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), cardRevealed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this), playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 19\n          }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [card.value, \" de \", card.suit]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this), roundNumber === 1 && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est rouge ou noire\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('rouge'),\n            children: \"Rouge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('noir'),\n            children: \"Noir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this), roundNumber === 2 && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('supérieure'),\n            children: \"Sup\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('inférieure'),\n            children: \"Inf\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('égale'),\n            children: \"\\xC9gale\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this), showDistribution && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 19\n          }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => distributeGorgees(index, 1),\n            children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 23\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }, this), waitingForConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextTurn,\n            children: \"J'ai bu, tour suivant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"L'Ardechoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: WowGuy,\n        alt: \"WOW Guy\",\n        className: \"wow-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPlayers\",\n          children: \"Nombre de joueurs :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"numPlayers\",\n          value: numPlayers,\n          onChange: handleNumPlayersChange,\n          children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num + 2,\n            children: num + 2\n          }, num + 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-names\",\n          children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Joueur ${index + 1}`,\n            value: name,\n            onChange: e => handlePlayerNameChange(e, index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-btn\",\n        onClick: handleStartGame,\n        children: \"Lancer le jeu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5xhdiYPNgBpZYCEwF/AOJQ2IA3Q=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CardIcon\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","WowGuy","jsxDEV","_jsxDEV","CardIcon","value","suit","suitSymbols","color","style","display","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgeesDistribuees","setGorgeesDistribuees","gorgeesRecues","setGorgeesRecues","cardRevealed","setCardRevealed","showDistribution","setShowDistribution","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","showRecap","setShowRecap","waitingForConfirmation","setWaitingForConfirmation","showIntermediatePage","setShowIntermediatePage","suits","generateCard","Math","floor","random","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","card","alert","handlePlayerGuess","guess","newPlayerCards","newGorgeesRecues","distributeGorgees","toPlayer","amount","newSplitGorgees","totalDistributed","reduce","total","entry","newGorgeesDistribuees","forEach","nextTurn","handleNextTurn","nextPlayer","prev","newCard","renderRecap","map","cardIndex","handleContinueToRecap","className","onClick","length","src","alt","htmlFor","id","onChange","keys","num","type","placeholder","_c2","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\n\n// Fonction pour afficher un icône de carte\nconst CardIcon = ({ value, suit }) => {\n  const suitSymbols = {\n    'cœur': '♥️',\n    'carreau': '♦️',\n    'pique': '♠️',\n    'trèfle': '♣️',\n  };\n  const color = (suit === 'cœur' || suit === 'carreau') ? 'red' : 'black';\n  \n  return (\n    <div style={{ display: 'inline-block', margin: '5px', color }}>\n      {value} {suitSymbols[suit]}\n    </div>\n  );\n};\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([]));\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [cardRevealed, setCardRevealed] = useState(false); \n  const [showDistribution, setShowDistribution] = useState(false); \n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return { value, suit };\n  };\n\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false); // Reset de l'état de carte révélée à chaque début de tour\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true); // Carte révélée\n\n    // Ajout des cartes dans le tableau de chaque joueur\n    const newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    // Gérer la distribution ou la perte de gorgées\n    if (guess === 'rouge' && (currentCard.suit === 'cœur' || currentCard.suit === 'carreau') ||\n        guess === 'noir' && (currentCard.suit === 'pique' || currentCard.suit === 'trèfle')) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n  };\n\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, { toPlayer, amount }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n\n    if (totalDistributed === gorgeesToDistribute) {\n      let newGorgeesDistribuees = [...gorgeesDistribuees];\n      let newGorgeesRecues = [...gorgeesRecues];\n      newSplitGorgees.forEach(({ toPlayer, amount }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]);\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false); \n    nextTurn(); // Utiliser la fonction nextTurn\n  };\n\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber((prev) => (prev % 4) + 1);\n    }\n\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false); // Reset pour la prochaine carte\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  const renderRecap = () => {\n    return playerNames.map((name, index) => (\n      <div key={index}>\n        <strong>{name} :</strong>\n        {playerCards[index].map((card, cardIndex) => (\n          <CardIcon key={cardIndex} value={card.value} suit={card.suit} />\n        ))}\n      </div>\n    ));\n  };\n\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {startGame ? (\n        <div className=\"game\">\n          {showRecap ? (\n            <div>\n              <h2>Récapitulatif provisoire</h2>\n              {renderRecap()}\n              <button onClick={() => alert(\"Phase suivante bientôt\")}>On passe à la suite !</button>\n            </div>\n          ) : showIntermediatePage ? (\n            <div>\n              <h2>La première phase de jeu est terminée !</h2>\n              <p>Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !</p>\n              <button onClick={handleContinueToRecap}>Passer au récap provisoire</button>\n            </div>\n          ) : (\n            <div>\n              <h2>{message}</h2>\n              {cardRevealed && (\n                <p>Carte révélée : {currentCard.value} de {currentCard.suit}</p>\n              )}\n\n              {playerCards[currentPlayer].length > 0 && (\n                <div>\n                  <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n                  {playerCards[currentPlayer].map((card, index) => (\n                    <p key={index}>\n                      {card.value} de {card.suit}\n                    </p>\n                  ))}\n                </div>\n              )}\n\n              {roundNumber === 1 && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est rouge ou noire</h3>\n                  <button onClick={() => handlePlayerGuess('rouge')}>Rouge</button>\n                  <button onClick={() => handlePlayerGuess('noir')}>Noir</button>\n                </div>\n              )}\n\n              {roundNumber === 2 && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est supérieure, inférieure ou égale à la première</h3>\n                  <button onClick={() => handlePlayerGuess('supérieure')}>Supérieure</button>\n                  <button onClick={() => handlePlayerGuess('inférieure')}>Inférieure</button>\n                  <button onClick={() => handlePlayerGuess('égale')}>Égale</button>\n                </div>\n              )}\n\n              {showDistribution && (\n                <div>\n                  <h3>Distribuez vos gorgées ({gorgeesToDistribute} à répartir)</h3>\n                  {playerNames.map((name, index) => (\n                    index !== currentPlayer && (\n                      <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                        Donner 1 gorgée à {name}\n                      </button>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {waitingForConfirmation && (\n                <div>\n                  <button onClick={handleNextTurn}>J'ai bu, tour suivant</button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"player-setup\">\n          <h1 className=\"title\">L'Ardechoise</h1>\n          <img src={WowGuy} alt=\"WOW Guy\" className=\"wow-image\" />\n          <div className=\"player-selection\">\n            <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n            <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n              {[...Array(9).keys()].map((num) => (\n                <option key={num + 2} value={num + 2}>\n                  {num + 2}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"player-names\">\n              {playerNames.map((name, index) => (\n                <input\n                  key={index}\n                  type=\"text\"\n                  placeholder={`Joueur ${index + 1}`}\n                  value={name}\n                  onChange={(e) => handlePlayerNameChange(e, index)}\n                />\n              ))}\n            </div>\n          </div>\n\n          <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}