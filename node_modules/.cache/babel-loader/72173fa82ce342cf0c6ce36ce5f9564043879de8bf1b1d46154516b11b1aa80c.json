{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck,\n  playerCards,\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [playersWithCard, setPlayersWithCard] = useState([]);\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0);\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (!remainingDeck || remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      console.log(\"Deck vide ou non défini\");\n      return;\n    }\n    console.log(\"Deck avant tirage: \", remainingDeck); // Affichage du deck avant tirage\n\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    console.log(\"Carte tirée: \", card); // Affichage de la carte tirée\n\n    if (!card) {\n      setMessage(\"Aucune carte n'a pu être tirée.\");\n      return;\n    }\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Vérification que playerCards est bien défini\n    if (!playerCards || playerCards.length === 0) {\n      setMessage(\"Erreur : Les cartes des joueurs ne sont pas disponibles.\");\n      console.log(\"playerCards non défini ou vide\");\n      return;\n    }\n\n    // Trouver les joueurs qui ont cette carte\n    console.log(\"Cartes des joueurs : \", playerCards);\n    console.log(\"Carte actuelle tirée : \", currentCard);\n    const playersWithThisCard = players.map((player, index) => {\n      var _playerCards$index;\n      return {\n        playerName: player,\n        playerIndex: index,\n        hasCard: (_playerCards$index = playerCards[index]) === null || _playerCards$index === void 0 ? void 0 : _playerCards$index.some(playerCard => (playerCard === null || playerCard === void 0 ? void 0 : playerCard.value) === (card === null || card === void 0 ? void 0 : card.value) && (playerCard === null || playerCard === void 0 ? void 0 : playerCard.suit) === (card === null || card === void 0 ? void 0 : card.suit))\n      };\n    }).filter(playerData => playerData.hasCard);\n    console.log(\"Joueurs ayant cette carte : \", playersWithThisCard); // Affichage des joueurs avec la carte\n\n    if (playersWithThisCard.length === 0) {\n      // Mode Hardcore : tirer une nouvelle carte si personne n'a la carte\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n      setTimeout(drawCard, 1500); // Attendre un peu avant de tirer une nouvelle carte\n    } else {\n      setPlayersWithCard(playersWithThisCard.map(p => p.playerIndex));\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phase Donne/Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: drawCard,\n      children: \"Tirer une carte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"9GN222msudnuUE8YCNvIbVEK7KM=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DonnePrendPhase","players","remainingDeck","playerCards","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","message","setMessage","playersWithCard","setPlayersWithCard","currentGiverIndex","setCurrentGiverIndex","drawCard","length","console","log","newDeck","card","pop","value","suit","playersWithThisCard","map","player","index","_playerCards$index","playerName","playerIndex","hasCard","some","playerCard","filter","playerData","setTimeout","p","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck, playerCards, updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [playersWithCard, setPlayersWithCard] = useState([]);\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0);\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (!remainingDeck || remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      console.log(\"Deck vide ou non défini\");\n      return;\n    }\n\n    console.log(\"Deck avant tirage: \", remainingDeck); // Affichage du deck avant tirage\n\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    console.log(\"Carte tirée: \", card); // Affichage de la carte tirée\n\n    if (!card) {\n      setMessage(\"Aucune carte n'a pu être tirée.\");\n      return;\n    }\n\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Vérification que playerCards est bien défini\n    if (!playerCards || playerCards.length === 0) {\n      setMessage(\"Erreur : Les cartes des joueurs ne sont pas disponibles.\");\n      console.log(\"playerCards non défini ou vide\");\n      return;\n    }\n\n    // Trouver les joueurs qui ont cette carte\n    console.log(\"Cartes des joueurs : \", playerCards);\n    console.log(\"Carte actuelle tirée : \", currentCard);\n\n    const playersWithThisCard = players\n      .map((player, index) => ({\n        playerName: player,\n        playerIndex: index,\n        hasCard: playerCards[index]?.some(\n          (playerCard) => playerCard?.value === card?.value && playerCard?.suit === card?.suit\n        ),\n      }))\n      .filter((playerData) => playerData.hasCard);\n\n    console.log(\"Joueurs ayant cette carte : \", playersWithThisCard); // Affichage des joueurs avec la carte\n\n    if (playersWithThisCard.length === 0) {\n      // Mode Hardcore : tirer une nouvelle carte si personne n'a la carte\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n      setTimeout(drawCard, 1500); // Attendre un peu avant de tirer une nouvelle carte\n    } else {\n      setPlayersWithCard(playersWithThisCard.map((p) => p.playerIndex));\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase Donne/Prend</h1>\n      {!cardRevealed ? (\n        <button onClick={drawCard}>Tirer une carte</button>\n      ) : (\n        <div>\n          <p>{message}</p>\n          {/* Afficher les joueurs qui distribuent */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}