{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck,\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [phase, setPhase] = useState(\"Donne\"); // Phase actuelle (Donne ou Prend)\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [distributedGorgees, setDistributedGorgees] = useState([]);\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n\n    // Mise à jour des gorgées à distribuer selon la valeur de la carte\n    const gorgees = card.value < 11 ? card.value : 10;\n    setGorgeesToDistribute(gorgees);\n    const action = phase === \"Donne\" ? \"Distribuez\" : \"Buvez\";\n    setMessage(`${action} ${gorgees} gorgée(s) avec la carte ${card.value} de ${card.suit}`);\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = toPlayer => {\n    if (gorgeesToDistribute === distributedGorgees.length) {\n      setMessage(\"Toutes les gorgées ont été distribuées.\");\n      return;\n    }\n    updateGorgees(toPlayer, 1);\n    setDistributedGorgees([...distributedGorgees, toPlayer]);\n    setMessage(`1 gorgée donnée à ${players[toPlayer]}.`);\n\n    // Vérifier si toutes les gorgées sont distribuées\n    if (distributedGorgees.length + 1 === gorgeesToDistribute) {\n      if (phase === \"Donne\") {\n        // Passer à la phase \"Prend\" une fois la distribution terminée\n        setPhase(\"Prend\");\n        setCardRevealed(false); // Pour tirer une nouvelle carte\n        setDistributedGorgees([]); // Reset distribution\n        setGorgeesToDistribute(0); // Reset gorgées\n      } else {\n        // Phase \"Prend\" terminée, passer au joueur suivant\n        endDonnePrendPhase();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Phase \", phase]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: drawCard,\n      children: \"Tirer une carte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), phase === \"Donne\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: players.map((name, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDistributeGorgee(index),\n          children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"jhAeuHVjXGwluscaI5K0JJ7dr38=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DonnePrendPhase","players","remainingDeck","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","message","setMessage","phase","setPhase","gorgeesToDistribute","setGorgeesToDistribute","distributedGorgees","setDistributedGorgees","drawCard","length","newDeck","card","pop","gorgees","value","action","suit","handleDistributeGorgee","toPlayer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","name","index","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck, updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [phase, setPhase] = useState(\"Donne\"); // Phase actuelle (Donne ou Prend)\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [distributedGorgees, setDistributedGorgees] = useState([]);\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n\n    // Mise à jour des gorgées à distribuer selon la valeur de la carte\n    const gorgees = card.value < 11 ? card.value : 10;\n    setGorgeesToDistribute(gorgees);\n\n    const action = phase === \"Donne\" ? \"Distribuez\" : \"Buvez\";\n    setMessage(`${action} ${gorgees} gorgée(s) avec la carte ${card.value} de ${card.suit}`);\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = (toPlayer) => {\n    if (gorgeesToDistribute === distributedGorgees.length) {\n      setMessage(\"Toutes les gorgées ont été distribuées.\");\n      return;\n    }\n\n    updateGorgees(toPlayer, 1);\n    setDistributedGorgees([...distributedGorgees, toPlayer]);\n    setMessage(`1 gorgée donnée à ${players[toPlayer]}.`);\n\n    // Vérifier si toutes les gorgées sont distribuées\n    if (distributedGorgees.length + 1 === gorgeesToDistribute) {\n      if (phase === \"Donne\") {\n        // Passer à la phase \"Prend\" une fois la distribution terminée\n        setPhase(\"Prend\");\n        setCardRevealed(false); // Pour tirer une nouvelle carte\n        setDistributedGorgees([]); // Reset distribution\n        setGorgeesToDistribute(0); // Reset gorgées\n      } else {\n        // Phase \"Prend\" terminée, passer au joueur suivant\n        endDonnePrendPhase();\n      }\n    }\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase {phase}</h1>\n      {!cardRevealed ? (\n        <button onClick={drawCard}>Tirer une carte</button>\n      ) : (\n        <div>\n          <p>{message}</p>\n          {phase === \"Donne\" && (\n            <div>\n              {players.map((name, index) => (\n                <button key={index} onClick={() => handleDistributeGorgee(index)}>\n                  Donner 1 gorgée à {name}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}