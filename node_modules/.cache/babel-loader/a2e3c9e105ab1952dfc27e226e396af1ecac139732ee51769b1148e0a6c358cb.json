{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck = [],\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = toPlayer => {\n    updateGorgees(toPlayer, 1);\n    setMessage(`${players[toPlayer]} a reçu 1 gorgée.`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phase Donne/Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: drawCard,\n      children: \"Tirer une carte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: players.map((name, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDistributeGorgee(index),\n          children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: endDonnePrendPhase,\n        children: \"Passer au joueur suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"2ABqdeOXGsJQSqCnrJCEj3mW/oQ=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DonnePrendPhase","players","remainingDeck","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","message","setMessage","drawCard","length","newDeck","card","pop","value","suit","handleDistributeGorgee","toPlayer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","name","index","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck = [], updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = (toPlayer) => {\n    updateGorgees(toPlayer, 1);\n    setMessage(`${players[toPlayer]} a reçu 1 gorgée.`);\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase Donne/Prend</h1>\n      {!cardRevealed ? (\n        <button onClick={drawCard}>Tirer une carte</button>\n      ) : (\n        <div>\n          <p>{message}</p>\n          <div>\n            {players.map((name, index) => (\n              <button key={index} onClick={() => handleDistributeGorgee(index)}>\n                Donner 1 gorgée à {name}\n              </button>\n            ))}\n          </div>\n          <button onClick={endDonnePrendPhase}>Passer au joueur suivant</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAAC;EAAEC,OAAO;EAAEC,aAAa,GAAG,EAAE;EAAEC,aAAa;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAC9F,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMe,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIV,aAAa,CAACW,MAAM,KAAK,CAAC,EAAE;MAC9BF,UAAU,CAAC,2CAA2C,CAAC;MACvD;IACF;IACA,MAAMG,OAAO,GAAG,CAAC,GAAGZ,aAAa,CAAC;IAClC,MAAMa,IAAI,GAAGD,OAAO,CAACE,GAAG,CAAC,CAAC;IAC1BT,cAAc,CAACQ,IAAI,CAAC;IACpBN,eAAe,CAAC,IAAI,CAAC;IACrBE,UAAU,CAAE,iBAAgBI,IAAI,CAACE,KAAM,OAAMF,IAAI,CAACG,IAAK,EAAC,CAAC;EAC3D,CAAC;;EAED;EACA,MAAMC,sBAAsB,GAAIC,QAAQ,IAAK;IAC3CjB,aAAa,CAACiB,QAAQ,EAAE,CAAC,CAAC;IAC1BT,UAAU,CAAE,GAAEV,OAAO,CAACmB,QAAQ,CAAE,mBAAkB,CAAC;EACrD,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCvB,OAAA;MAAAuB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzB,CAAClB,YAAY,gBACZT,OAAA;MAAQ4B,OAAO,EAAEf,QAAS;MAAAU,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAEnD3B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAIZ;MAAO;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChB3B,OAAA;QAAAuB,QAAA,EACGrB,OAAO,CAAC2B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACvB/B,OAAA;UAAoB4B,OAAO,EAAEA,CAAA,KAAMR,sBAAsB,CAACW,KAAK,CAAE;UAAAR,QAAA,GAAC,0BAC9C,EAACO,IAAI;QAAA,GADZC,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3B,OAAA;QAAQ4B,OAAO,EAAEvB,kBAAmB;QAAAkB,QAAA,EAAC;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrB,EAAA,CA5CIL,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AA8CrB,eAAeA,eAAe;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}