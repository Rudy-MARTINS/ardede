{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './app.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2); // Nombre de joueurs\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill('')); // Noms des joueurs\n  const [startGame, setStartGame] = useState(false); // Démarrage du jeu\n  const [currentPlayer, setCurrentPlayer] = useState(0); // Suivi du joueur actuel\n  const [roundNumber, setRoundNumber] = useState(1); // Numéro du tour\n  const [message, setMessage] = useState(''); // Messages de feedback\n  const [currentCard, setCurrentCard] = useState(null); // Carte courante\n  const [previousCards, setPreviousCards] = useState([]); // Cartes précédentes du joueur\n  const [gorgéesDistribuées, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0)); // Gorgées distribuées\n  const [gorgéesReçues, setGorgeesRecues] = useState(Array(numPlayers).fill(0)); // Gorgées reçues\n  const [showDistribution, setShowDistribution] = useState(false); // Affichage de la distribution des gorgées\n  const [cardRevealed, setCardRevealed] = useState(false); // Carte révélée après la devinette\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle']; // Formes de carte\n\n  // Génère une carte aléatoire (valeur et couleur)\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1; // Carte de 1 à 13\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return {\n      value,\n      suit\n    };\n  };\n\n  // Gestion du nombre de joueurs\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n  };\n\n  // Gestion du changement de pseudo\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  // Démarrer le jeu après avoir saisi les pseudos\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`Le jeu commence avec ${playerNames[currentPlayer]}.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false); // Cacher la carte tant que la devinette n'est pas faite\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  // Fonction pour valider le résultat du Tour 1 (rouge ou noir)\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    setCardRevealed(true); // Révéler la carte après la devinette\n\n    if (guess === 'rouge' && isRed || guess === 'noir' && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a gagné ! Il peut distribuer une gorgée.`);\n      setShowDistribution(true); // Afficher la distribution des gorgées\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu. Il boit une gorgée.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 1; // Boit une gorgée\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn(); // Passer au tour suivant après avoir bu\n    }\n  };\n\n  // Fonction pour distribuer des gorgées\n  const distributeGorgees = (toPlayer, amount) => {\n    let newGorgeesDistribuees = [...gorgéesDistribuées];\n    newGorgeesDistribuees[currentPlayer] += amount;\n    let newGorgeesRecues = [...gorgéesReçues];\n    newGorgeesRecues[toPlayer] += amount;\n    setGorgeesDistribuees(newGorgeesDistribuees);\n    setGorgeesRecues(newGorgeesRecues);\n    setShowDistribution(false);\n    nextTurn();\n  };\n\n  // Passer au tour suivant\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    if (roundNumber === 4) {\n      setRoundNumber(1); // Réinitialiser le tour\n    } else {\n      setRoundNumber(roundNumber + 1);\n    }\n\n    // Stocker la carte tirée\n    let updatedPreviousCards = [...previousCards];\n    updatedPreviousCards.push(currentCard);\n    setPreviousCards(updatedPreviousCards);\n\n    // Nouvelle carte\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false); // Cacher la nouvelle carte jusqu'à la prochaine devinette\n\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à ton tour de jouer.`);\n  };\n\n  // Récapitulatif à la fin\n  const showRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [name, \" a distribu\\xE9 \", gorgéesDistribuées[index], \" gorg\\xE9es et a bu \", gorgéesReçues[index], \" gorg\\xE9es.\"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this));\n  };\n  if (startGame) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), cardRevealed ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard === null || currentCard === void 0 ? void 0 : currentCard.value, \" de \", currentCard === null || currentCard === void 0 ? void 0 : currentCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this) : null, previousCards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Cartes pr\\xE9c\\xE9dentes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), previousCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [card.value, \" de \", card.suit]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), roundNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est rouge ou noire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleColorGuess('rouge'),\n          children: \"Rouge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleColorGuess('noir'),\n          children: \"Noir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), showDistribution ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\xC0 qui distribuer ?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => distributeGorgees(index, 1),\n          children: name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this) : null, roundNumber === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), showRecap()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"L'Ardechoise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"numPlayers\",\n        children: \"Nombre de joueurs :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"numPlayers\",\n        value: numPlayers,\n        onChange: handleNumPlayersChange,\n        children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: num + 2,\n          children: num + 2\n        }, num + 2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-names\",\n        children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: `Joueur ${index + 1}`,\n          value: name,\n          onChange: e => handlePlayerNameChange(e, index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-game-btn\",\n      onClick: handleStartGame,\n      children: \"Lancer le jeu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EOlHbIvZsko9GO1Ar+Sdasi8LBE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","previousCards","setPreviousCards","gorgéesDistribuées","setGorgeesDistribuees","gorgéesReçues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","suits","generateCard","value","Math","floor","random","suit","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","card","alert","handleColorGuess","guess","isRed","newGorgeesRecues","nextTurn","distributeGorgees","toPlayer","amount","newGorgeesDistribuees","nextPlayer","updatedPreviousCards","push","newCard","showRecap","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","onClick","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './app.css';\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2); // Nombre de joueurs\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill('')); // Noms des joueurs\n  const [startGame, setStartGame] = useState(false); // Démarrage du jeu\n  const [currentPlayer, setCurrentPlayer] = useState(0); // Suivi du joueur actuel\n  const [roundNumber, setRoundNumber] = useState(1); // Numéro du tour\n  const [message, setMessage] = useState(''); // Messages de feedback\n  const [currentCard, setCurrentCard] = useState(null); // Carte courante\n  const [previousCards, setPreviousCards] = useState([]); // Cartes précédentes du joueur\n  const [gorgéesDistribuées, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0)); // Gorgées distribuées\n  const [gorgéesReçues, setGorgeesRecues] = useState(Array(numPlayers).fill(0)); // Gorgées reçues\n  const [showDistribution, setShowDistribution] = useState(false); // Affichage de la distribution des gorgées\n  const [cardRevealed, setCardRevealed] = useState(false); // Carte révélée après la devinette\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle']; // Formes de carte\n\n  // Génère une carte aléatoire (valeur et couleur)\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1; // Carte de 1 à 13\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return { value, suit };\n  };\n\n  // Gestion du nombre de joueurs\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n  };\n\n  // Gestion du changement de pseudo\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  // Démarrer le jeu après avoir saisi les pseudos\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`Le jeu commence avec ${playerNames[currentPlayer]}.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false); // Cacher la carte tant que la devinette n'est pas faite\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  // Fonction pour valider le résultat du Tour 1 (rouge ou noir)\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    setCardRevealed(true); // Révéler la carte après la devinette\n\n    if ((guess === 'rouge' && isRed) || (guess === 'noir' && !isRed)) {\n      setMessage(`${playerNames[currentPlayer]} a gagné ! Il peut distribuer une gorgée.`);\n      setShowDistribution(true); // Afficher la distribution des gorgées\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu. Il boit une gorgée.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 1; // Boit une gorgée\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn(); // Passer au tour suivant après avoir bu\n    }\n  };\n\n  // Fonction pour distribuer des gorgées\n  const distributeGorgees = (toPlayer, amount) => {\n    let newGorgeesDistribuees = [...gorgéesDistribuées];\n    newGorgeesDistribuees[currentPlayer] += amount;\n\n    let newGorgeesRecues = [...gorgéesReçues];\n    newGorgeesRecues[toPlayer] += amount;\n\n    setGorgeesDistribuees(newGorgeesDistribuees);\n    setGorgeesRecues(newGorgeesRecues);\n    setShowDistribution(false);\n    nextTurn();\n  };\n\n  // Passer au tour suivant\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    if (roundNumber === 4) {\n      setRoundNumber(1); // Réinitialiser le tour\n    } else {\n      setRoundNumber(roundNumber + 1);\n    }\n\n    // Stocker la carte tirée\n    let updatedPreviousCards = [...previousCards];\n    updatedPreviousCards.push(currentCard);\n    setPreviousCards(updatedPreviousCards);\n\n    // Nouvelle carte\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false); // Cacher la nouvelle carte jusqu'à la prochaine devinette\n\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à ton tour de jouer.`);\n  };\n\n  // Récapitulatif à la fin\n  const showRecap = () => {\n    return playerNames.map((name, index) => (\n      <p key={index}>\n        {name} a distribué {gorgéesDistribuées[index]} gorgées et a bu {gorgéesReçues[index]} gorgées.\n      </p>\n    ));\n  };\n\n  if (startGame) {\n    return (\n      <div className=\"game\">\n        <h2>{message}</h2>\n\n        {cardRevealed ? (\n          <p>Carte révélée : {currentCard?.value} de {currentCard?.suit}</p>\n        ) : null}\n\n        {previousCards.length > 0 && (\n          <div>\n            <h3>Cartes précédentes</h3>\n            {previousCards.map((card, index) => (\n              <p key={index}>\n                {card.value} de {card.suit}\n              </p>\n            ))}\n          </div>\n        )}\n\n        {roundNumber === 1 && !showDistribution && !cardRevealed && (\n          <div>\n            <h3>Devinez si la carte est rouge ou noire</h3>\n            <button onClick={() => handleColorGuess('rouge')}>Rouge</button>\n            <button onClick={() => handleColorGuess('noir')}>Noir</button>\n          </div>\n        )}\n\n        {showDistribution ? (\n          <div>\n            <h3>À qui distribuer ?</h3>\n            {playerNames.map((name, index) => (\n              index !== currentPlayer && (\n                <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                  {name}\n                </button>\n              )\n            ))}\n          </div>\n        ) : null}\n\n        {roundNumber === 4 && (\n          <div>\n            <h2>Récapitulatif</h2>\n            {showRecap()}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">L'Ardechoise</h1>\n      {/* Sélecteur de nombre de joueurs */}\n      <div className=\"player-selection\">\n        <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n        <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n          {[...Array(9).keys()].map((num) => (\n            <option key={num + 2} value={num + 2}>\n              {num + 2}\n            </option>\n          ))}\n        </select>\n\n        {/* Champs de saisie pour les noms des joueurs */}\n        <div className=\"player-names\">\n          {playerNames.map((name, index) => (\n            <input\n              key={index}\n              type=\"text\"\n              placeholder={`Joueur ${index + 1}`}\n              value={name}\n              onChange={(e) => handlePlayerNameChange(e, index)}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Bouton pour lancer le jeu */}\n      <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}