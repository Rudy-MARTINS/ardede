{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck = [],\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(1); // 1 gorgée à distribuer\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Ceux qui donnent 1 gorgée sont...`);\n  };\n\n  // Fonction pour distribuer des gorgées\n  const handleDistributeGorgee = toPlayer => {\n    updateGorgees(toPlayer, gorgeesToDistribute);\n    setMessage(`${players[toPlayer]} a distribué ${gorgeesToDistribute} gorgée(s).`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phase Donne/Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: drawCard,\n      children: \"Tirer une carte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Carte tir\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: players.map((name, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDistributeGorgee(index),\n          children: [name, \" donne \", gorgeesToDistribute, \" gorg\\xE9e(s)\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: endDonnePrendPhase,\n        children: \"Passer au joueur suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"cpAZ/yz2jO3TYlrtkcu+7nEqWSs=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DonnePrendPhase","players","remainingDeck","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","message","setMessage","gorgeesToDistribute","setGorgeesToDistribute","drawCard","length","newDeck","card","pop","handleDistributeGorgee","toPlayer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","suit","map","name","index","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck = [], updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(1); // 1 gorgée à distribuer\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Ceux qui donnent 1 gorgée sont...`);\n  };\n\n  // Fonction pour distribuer des gorgées\n  const handleDistributeGorgee = (toPlayer) => {\n    updateGorgees(toPlayer, gorgeesToDistribute);\n    setMessage(`${players[toPlayer]} a distribué ${gorgeesToDistribute} gorgée(s).`);\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase Donne/Prend</h1>\n      {!cardRevealed ? (\n        <button onClick={drawCard}>Tirer une carte</button>\n      ) : (\n        <div>\n          <h2>Carte tirée : {currentCard.value} de {currentCard.suit}</h2>\n          <p>{message}</p>\n          <div>\n            {players.map((name, index) => (\n              <button key={index} onClick={() => handleDistributeGorgee(index)}>\n                {name} donne {gorgeesToDistribute} gorgée(s)\n              </button>\n            ))}\n          </div>\n          <button onClick={endDonnePrendPhase}>Passer au joueur suivant</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAAC;EAAEC,OAAO;EAAEC,aAAa,GAAG,EAAE;EAAEC,aAAa;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAC9F,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEnE;EACA,MAAMiB,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIZ,aAAa,CAACa,MAAM,KAAK,CAAC,EAAE;MAC9BJ,UAAU,CAAC,2CAA2C,CAAC;MACvD;IACF;IACA,MAAMK,OAAO,GAAG,CAAC,GAAGd,aAAa,CAAC;IAClC,MAAMe,IAAI,GAAGD,OAAO,CAACE,GAAG,CAAC,CAAC;IAC1BX,cAAc,CAACU,IAAI,CAAC;IACpBR,eAAe,CAAC,IAAI,CAAC;IACrBE,UAAU,CAAE,mCAAkC,CAAC;EACjD,CAAC;;EAED;EACA,MAAMQ,sBAAsB,GAAIC,QAAQ,IAAK;IAC3CjB,aAAa,CAACiB,QAAQ,EAAER,mBAAmB,CAAC;IAC5CD,UAAU,CAAE,GAAEV,OAAO,CAACmB,QAAQ,CAAE,gBAAeR,mBAAoB,aAAY,CAAC;EAClF,CAAC;EAED,oBACEb,OAAA;IAAKsB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCvB,OAAA;MAAAuB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzB,CAAClB,YAAY,gBACZT,OAAA;MAAQ4B,OAAO,EAAEb,QAAS;MAAAQ,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAEnD3B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,GAAI,mBAAc,EAAChB,WAAW,CAACsB,KAAK,EAAC,MAAI,EAACtB,WAAW,CAACuB,IAAI;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChE3B,OAAA;QAAAuB,QAAA,EAAIZ;MAAO;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChB3B,OAAA;QAAAuB,QAAA,EACGrB,OAAO,CAAC6B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACvBjC,OAAA;UAAoB4B,OAAO,EAAEA,CAAA,KAAMR,sBAAsB,CAACa,KAAK,CAAE;UAAAV,QAAA,GAC9DS,IAAI,EAAC,SAAO,EAACnB,mBAAmB,EAAC,eACpC;QAAA,GAFaoB,KAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3B,OAAA;QAAQ4B,OAAO,EAAEvB,kBAAmB;QAAAkB,QAAA,EAAC;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrB,EAAA,CA9CIL,eAAe;AAAAiC,EAAA,GAAfjC,eAAe;AAgDrB,eAAeA,eAAe;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}