{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\nimport DonnePrendPhase from './DonnePrendPhase'; // Assurez-vous que le composant est correctement importé\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([])); // Stocker les cartes des joueurs ici\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const [donnePrendPhase, setDonnePrendPhase] = useState(false);\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const cardLabels = ['1 gorgée', '2 gorgées', '3 gorgées', '4 gorgées'];\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return {\n      value,\n      suit\n    };\n  };\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true);\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if (guess === 'rouge' && isRed || guess === 'noir' && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n  const savePlayerCard = () => {\n    const newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard]; // Ajouter la carte du joueur actuel\n    setPlayerCards(newPlayerCards);\n  };\n  const handleComparisonGuess = guess => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n    if (guess === 'supérieure' && comparison > 0 || guess === 'inférieure' && comparison < 0 || guess === 'égale' && comparison === 0) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n  const handleInsideOutsideGuess = guess => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) && currentCard.value < Math.max(...cards.map(card => card.value));\n    if (guess === 'intérieur' && isInside || guess === 'extérieur' && !isInside) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n  const handleSuitGuess = guess => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber(prev => prev % 4 + 1);\n    }\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n  const renderRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [name, \" a distribu\\xE9 \", gorgeesDistribuees[index], \" gorg\\xE9es et a bu \", gorgeesRecues[index], \" gorg\\xE9es.\"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this));\n  };\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n  const startDonnePrendPhase = () => {\n    setShowIntermediatePage(false);\n    setShowRecap(false);\n    setDonnePrendPhase(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: startGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: showRecap ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif provisoire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }, this), renderRecap(), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startDonnePrendPhase,\n          children: \"On passe \\xE0 la suite !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this) : showIntermediatePage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"La premi\\xE8re phase de jeu est termin\\xE9e !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueToRecap,\n          children: \"Passer au r\\xE9cap provisoire avant la suite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this) : donnePrendPhase ? /*#__PURE__*/_jsxDEV(DonnePrendPhase, {\n        playerNames: playerNames,\n        playerCards: playerCards // Passer les cartes tirées par les joueurs à la phase Donne/Prend\n        ,\n        gorgeesDistribuees: gorgeesDistribuees,\n        setGorgeesDistribuees: setGorgeesDistribuees\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this), cardRevealed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard.value, \" de \", currentCard.suit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, this), playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 19\n          }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [card.value, \" de \", card.suit]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }, this), roundNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est rouge ou noire\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('rouge'),\n            children: \"Rouge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('noir'),\n            children: \"Noir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 17\n        }, this), roundNumber === 2 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('supérieure'),\n            children: \"Sup\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('inférieure'),\n            children: \"Inf\\xE9rieure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('égale'),\n            children: \"\\xC9gale\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 17\n        }, this), roundNumber === 3 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez si la carte est \\xE0 l'int\\xE9rieur ou \\xE0 l'ext\\xE9rieur des cartes pr\\xE9c\\xE9dentes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('intérieur'),\n            children: \"\\xC0 l'int\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('extérieur'),\n            children: \"\\xC0 l'ext\\xE9rieur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 17\n        }, this), roundNumber === 4 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Devinez la forme de la carte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('cœur'),\n            children: \"C\\u0153ur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('carreau'),\n            children: \"Carreau\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('pique'),\n            children: \"Pique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlayerGuess('trèfle'),\n            children: \"Tr\\xE8fle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this), showDistribution && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 19\n          }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => distributeGorgees(index, 1),\n            children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 23\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }, this), waitingForConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextTurn,\n            children: \"J'ai bu, tour suivant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"L'Ardechoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: WowGuy,\n        alt: \"WOW Guy\",\n        className: \"wow-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPlayers\",\n          children: \"Nombre de joueurs :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"numPlayers\",\n          value: numPlayers,\n          onChange: handleNumPlayersChange,\n          children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num + 2,\n            children: num + 2\n          }, num + 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-names\",\n          children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Joueur ${index + 1}`,\n            value: name,\n            onChange: e => {\n              const newPlayerNames = [...playerNames];\n              newPlayerNames[index] = e.target.value;\n              setPlayerNames(newPlayerNames);\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-btn\",\n        onClick: handleStartGame,\n        children: \"Lancer le jeu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ei8EPeZ0OfOmvMSmrceEXh6umlo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WowGuy","DonnePrendPhase","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgeesDistribuees","setGorgeesDistribuees","gorgeesRecues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","showRecap","setShowRecap","waitingForConfirmation","setWaitingForConfirmation","showIntermediatePage","setShowIntermediatePage","donnePrendPhase","setDonnePrendPhase","suits","cardLabels","generateCard","value","Math","floor","random","suit","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","card","alert","handlePlayerGuess","guess","handleColorGuess","handleComparisonGuess","handleInsideOutsideGuess","handleSuitGuess","isRed","newGorgeesRecues","savePlayerCard","newPlayerCards","previousCard","comparison","cards","isInside","min","map","max","handleNextTurn","nextTurn","nextPlayer","prev","newCard","renderRecap","children","fileName","_jsxFileName","lineNumber","columnNumber","handleContinueToRecap","startDonnePrendPhase","className","onClick","length","distributeGorgees","src","alt","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './app.css';\nimport WowGuy from './assets/images/WowGuy.webp';\nimport DonnePrendPhase from './DonnePrendPhase'; // Assurez-vous que le composant est correctement importé\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill(''));\n  const [startGame, setStartGame] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [message, setMessage] = useState('');\n  const [currentCard, setCurrentCard] = useState(null);\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([])); // Stocker les cartes des joueurs ici\n  const [gorgeesDistribuees, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0));\n  const [gorgeesRecues, setGorgeesRecues] = useState(Array(numPlayers).fill(0));\n  const [showDistribution, setShowDistribution] = useState(false);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0);\n  const [splitGorgees, setSplitGorgees] = useState([]);\n  const [showRecap, setShowRecap] = useState(false);\n  const [waitingForConfirmation, setWaitingForConfirmation] = useState(false);\n  const [showIntermediatePage, setShowIntermediatePage] = useState(false);\n  const [donnePrendPhase, setDonnePrendPhase] = useState(false);\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle'];\n  const cardLabels = ['1 gorgée', '2 gorgées', '3 gorgées', '4 gorgées'];\n\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1;\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return { value, suit };\n  };\n\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([]));\n  };\n\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false);\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true);\n\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if ((guess === 'rouge' && isRed) || (guess === 'noir' && !isRed)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n\n  const savePlayerCard = () => {\n    const newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard]; // Ajouter la carte du joueur actuel\n    setPlayerCards(newPlayerCards);\n  };\n\n  const handleComparisonGuess = (guess) => {\n    const previousCard = playerCards[currentPlayer][0];\n    const comparison = currentCard.value - previousCard.value;\n\n    if ((guess === 'supérieure' && comparison > 0) ||\n        (guess === 'inférieure' && comparison < 0) ||\n        (guess === 'égale' && comparison === 0)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n\n  const handleInsideOutsideGuess = (guess) => {\n    const cards = playerCards[currentPlayer];\n    const isInside = currentCard.value > Math.min(...cards.map(card => card.value)) &&\n                     currentCard.value < Math.max(...cards.map(card => card.value));\n\n    if ((guess === 'intérieur' && isInside) || (guess === 'extérieur' && !isInside)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n\n  const handleSuitGuess = (guess) => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer ${roundNumber} gorgée(s).`);\n      setGorgeesToDistribute(roundNumber);\n      setShowDistribution(true);\n    } else {\n      setMessage(`Ah ah ah, bien joué ${playerNames[currentPlayer]}... c'était pas ça. TU BOIS ${roundNumber} gorgée(s) !`);\n      let newGorgeesRecues = [...gorgeesRecues];\n      newGorgeesRecues[currentPlayer] += roundNumber;\n      setGorgeesRecues(newGorgeesRecues);\n      setWaitingForConfirmation(true);\n    }\n    savePlayerCard(); // Enregistrer la carte tirée\n  };\n\n  const handleNextTurn = () => {\n    setWaitingForConfirmation(false);\n    nextTurn();\n  };\n\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    if (nextPlayer === 0) {\n      if (roundNumber === 4) {\n        setShowIntermediatePage(true);\n        return;\n      }\n      setRoundNumber((prev) => (prev % 4) + 1);\n    }\n\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false);\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  const renderRecap = () => {\n    return playerNames.map((name, index) => (\n      <p key={index}>\n        {name} a distribué {gorgeesDistribuees[index]} gorgées et a bu {gorgeesRecues[index]} gorgées.\n      </p>\n    ));\n  };\n\n  const handleContinueToRecap = () => {\n    setShowRecap(true);\n  };\n\n  const startDonnePrendPhase = () => {\n    setShowIntermediatePage(false);\n    setShowRecap(false);\n    setDonnePrendPhase(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {startGame ? (\n        <div className=\"game\">\n          {showRecap ? (\n            <div>\n              <h2>Récapitulatif provisoire</h2>\n              {renderRecap()}\n              <button onClick={startDonnePrendPhase}>On passe à la suite !</button>\n            </div>\n          ) : showIntermediatePage ? (\n            <div>\n              <h2>La première phase de jeu est terminée !</h2>\n              <p>Vous pouvez reposer vos foies... Mais pas trop longtemps car la suite arrive !</p>\n              <button onClick={handleContinueToRecap}>Passer au récap provisoire avant la suite</button>\n            </div>\n          ) : donnePrendPhase ? (\n            <DonnePrendPhase\n              playerNames={playerNames}\n              playerCards={playerCards} // Passer les cartes tirées par les joueurs à la phase Donne/Prend\n              gorgeesDistribuees={gorgeesDistribuees}\n              setGorgeesDistribuees={setGorgeesDistribuees}\n            />\n          ) : (\n            <div>\n              <h2>{message}</h2>\n              {cardRevealed && (\n                <p>Carte révélée : {currentCard.value} de {currentCard.suit}</p>\n              )}\n\n              {playerCards[currentPlayer].length > 0 && (\n                <div>\n                  <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n                  {playerCards[currentPlayer].map((card, index) => (\n                    <p key={index}>\n                      {card.value} de {card.suit}\n                    </p>\n                  ))}\n                </div>\n              )}\n\n              {roundNumber === 1 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est rouge ou noire</h3>\n                  <button onClick={() => handlePlayerGuess('rouge')}>Rouge</button>\n                  <button onClick={() => handlePlayerGuess('noir')}>Noir</button>\n                </div>\n              )}\n\n              {roundNumber === 2 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est supérieure, inférieure ou égale à la première</h3>\n                  <button onClick={() => handlePlayerGuess('supérieure')}>Supérieure</button>\n                  <button onClick={() => handlePlayerGuess('inférieure')}>Inférieure</button>\n                  <button onClick={() => handlePlayerGuess('égale')}>Égale</button>\n                </div>\n              )}\n\n              {roundNumber === 3 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez si la carte est à l'intérieur ou à l'extérieur des cartes précédentes</h3>\n                  <button onClick={() => handlePlayerGuess('intérieur')}>À l'intérieur</button>\n                  <button onClick={() => handlePlayerGuess('extérieur')}>À l'extérieur</button>\n                </div>\n              )}\n\n              {roundNumber === 4 && !showDistribution && !cardRevealed && (\n                <div>\n                  <h3>Devinez la forme de la carte</h3>\n                  <button onClick={() => handlePlayerGuess('cœur')}>Cœur</button>\n                  <button onClick={() => handlePlayerGuess('carreau')}>Carreau</button>\n                  <button onClick={() => handlePlayerGuess('pique')}>Pique</button>\n                  <button onClick={() => handlePlayerGuess('trèfle')}>Trèfle</button>\n                </div>\n              )}\n\n              {showDistribution && (\n                <div>\n                  <h3>Distribuez vos gorgées ({gorgeesToDistribute} à répartir)</h3>\n                  {playerNames.map((name, index) => (\n                    index !== currentPlayer && (\n                      <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                        Donner 1 gorgée à {name}\n                      </button>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {waitingForConfirmation && (\n                <div>\n                  <button onClick={handleNextTurn}>J'ai bu, tour suivant</button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"player-setup\">\n          <h1 className=\"title\">L'Ardechoise</h1>\n          <img src={WowGuy} alt=\"WOW Guy\" className=\"wow-image\" />\n          <div className=\"player-selection\">\n            <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n            <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n              {[...Array(9).keys()].map((num) => (\n                <option key={num + 2} value={num + 2}>\n                  {num + 2}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"player-names\">\n              {playerNames.map((name, index) => (\n                <input\n                  key={index}\n                  type=\"text\"\n                  placeholder={`Joueur ${index + 1}`}\n                  value={name}\n                  onChange={(e) => {\n                    const newPlayerNames = [...playerNames];\n                    newPlayerNames[index] = e.target.value;\n                    setPlayerNames(newPlayerNames);\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n\n          <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}