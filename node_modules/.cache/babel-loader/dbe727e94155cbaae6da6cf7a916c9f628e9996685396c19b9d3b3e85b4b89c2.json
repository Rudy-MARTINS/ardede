{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\components\\\\Game\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Round1 from '../Round1/Round1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game({\n  players\n}) {\n  _s();\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [deck, setDeck] = useState(shuffleDeck(createDeck()));\n  const [playerCards, setPlayerCards] = useState({});\n  const saveCard = (player, card) => {\n    setPlayerCards(prevCards => ({\n      ...prevCards,\n      [player]: [...(prevCards[player] || []), card] // Sauvegarde les cartes pour chaque joueur\n    }));\n  };\n\n  // Gestion du passage au joueur suivant ou au prochain round\n  const handleNextRound = actionType => {\n    if (actionType === 'next') {\n      if (currentPlayerIndex < players.length - 1) {\n        console.log(`Passage au joueur suivant : ${players[currentPlayerIndex + 1]}`);\n        setCurrentPlayerIndex(currentPlayerIndex + 1); // Passe au joueur suivant\n      } else {\n        console.log('Fin du Round 1, passez au Round 2');\n        // Logique pour passer au Round 2 peut être ajoutée ici\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(Round1, {\n      player: players[currentPlayerIndex],\n      deck: deck,\n      onAction: handleNextRound,\n      onSaveCard: saveCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"E5akonRnDRcY6YsVP2Eb89cjM44=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Round1","jsxDEV","_jsxDEV","Game","players","_s","currentPlayerIndex","setCurrentPlayerIndex","deck","setDeck","shuffleDeck","createDeck","playerCards","setPlayerCards","saveCard","player","card","prevCards","handleNextRound","actionType","length","console","log","className","children","onAction","onSaveCard","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/components/Game/Game.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Round1 from '../Round1/Round1';\n\nfunction Game({ players }) {\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [deck, setDeck] = useState(shuffleDeck(createDeck()));\n  const [playerCards, setPlayerCards] = useState({});\n\n  const saveCard = (player, card) => {\n    setPlayerCards((prevCards) => ({\n      ...prevCards,\n      [player]: [...(prevCards[player] || []), card], // Sauvegarde les cartes pour chaque joueur\n    }));\n  };\n\n  // Gestion du passage au joueur suivant ou au prochain round\n  const handleNextRound = (actionType) => {\n    if (actionType === 'next') {\n      if (currentPlayerIndex < players.length - 1) {\n        console.log(`Passage au joueur suivant : ${players[currentPlayerIndex + 1]}`);\n        setCurrentPlayerIndex(currentPlayerIndex + 1); // Passe au joueur suivant\n      } else {\n        console.log('Fin du Round 1, passez au Round 2');\n        // Logique pour passer au Round 2 peut être ajoutée ici\n      }\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      <Round1\n        player={players[currentPlayerIndex]}\n        deck={deck}\n        onAction={handleNextRound}\n        onSaveCard={saveCard}\n      />\n    </div>\n  );\n}\n\nexport default Game;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,IAAIA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACzB,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACW,WAAW,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,MAAMe,QAAQ,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;IACjCH,cAAc,CAAEI,SAAS,KAAM;MAC7B,GAAGA,SAAS;MACZ,CAACF,MAAM,GAAG,CAAC,IAAIE,SAAS,CAACF,MAAM,CAAC,IAAI,EAAE,CAAC,EAAEC,IAAI,CAAC,CAAE;IAClD,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,eAAe,GAAIC,UAAU,IAAK;IACtC,IAAIA,UAAU,KAAK,MAAM,EAAE;MACzB,IAAIb,kBAAkB,GAAGF,OAAO,CAACgB,MAAM,GAAG,CAAC,EAAE;QAC3CC,OAAO,CAACC,GAAG,CAAE,+BAA8BlB,OAAO,CAACE,kBAAkB,GAAG,CAAC,CAAE,EAAC,CAAC;QAC7EC,qBAAqB,CAACD,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;MACjD,CAAC,MAAM;QACLe,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChD;MACF;IACF;EACF,CAAC;EAED,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBtB,OAAA,CAACF,MAAM;MACLe,MAAM,EAAEX,OAAO,CAACE,kBAAkB,CAAE;MACpCE,IAAI,EAAEA,IAAK;MACXiB,QAAQ,EAAEP,eAAgB;MAC1BQ,UAAU,EAAEZ;IAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CAnCQF,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAqCb,eAAeA,IAAI;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}