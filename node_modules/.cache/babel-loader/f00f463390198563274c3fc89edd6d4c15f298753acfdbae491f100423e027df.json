{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\PROJETS ALL\\\\ardede\\\\ardede\\\\src\\\\components\\\\DonnePrendPhase\\\\DonnePrendPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonnePrendPhase = ({\n  players,\n  remainingDeck,\n  playerCards,\n  updateGorgees,\n  endDonnePrendPhase\n}) => {\n  _s();\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [playersWithCard, setPlayersWithCard] = useState([]);\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0); // Index du joueur actuel qui doit donner\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Trouver les joueurs qui ont cette carte\n    const playersWithThisCard = players.map((player, index) => ({\n      playerName: player,\n      playerIndex: index,\n      hasCard: playerCards[index].some(playerCard => playerCard.value === card.value && playerCard.suit === card.suit)\n    })).filter(playerData => playerData.hasCard);\n    if (playersWithThisCard.length === 0) {\n      // Mode Hardcore : tirer une nouvelle carte si personne n'a la carte\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n      setTimeout(drawCard, 1500); // Attendre un peu avant de tirer une nouvelle carte\n    } else {\n      setPlayersWithCard(playersWithThisCard.map(p => p.playerIndex));\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = toPlayer => {\n    updateGorgees(toPlayer, 1);\n    const currentGiver = players[playersWithCard[currentGiverIndex]];\n    setMessage(`${currentGiver} a distribué 1 gorgée à ${players[toPlayer]}.`);\n\n    // Passer au prochain joueur qui doit distribuer ou terminer\n    if (currentGiverIndex < playersWithCard.length - 1) {\n      setCurrentGiverIndex(currentGiverIndex + 1);\n    } else {\n      setMessage(\"Distribution terminée. Passer au joueur suivant.\");\n      setTimeout(endDonnePrendPhase, 2000); // Attendre avant de passer à l'étape suivante\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donne-prend-phase\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phase Donne/Prend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), !cardRevealed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: drawCard,\n      children: \"Tirer une carte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), playersWithCard.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [players[playersWithCard[currentGiverIndex]], \", distribuez vos gorg\\xE9es\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), players.map((name, index) => index !== playersWithCard[currentGiverIndex] && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDistributeGorgee(index),\n          children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Aucun joueur n'a cette carte. Nouvelle carte en mode Hardcore...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(DonnePrendPhase, \"9GN222msudnuUE8YCNvIbVEK7KM=\");\n_c = DonnePrendPhase;\nexport default DonnePrendPhase;\nvar _c;\n$RefreshReg$(_c, \"DonnePrendPhase\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DonnePrendPhase","players","remainingDeck","playerCards","updateGorgees","endDonnePrendPhase","_s","currentCard","setCurrentCard","cardRevealed","setCardRevealed","message","setMessage","playersWithCard","setPlayersWithCard","currentGiverIndex","setCurrentGiverIndex","drawCard","length","newDeck","card","pop","value","suit","playersWithThisCard","map","player","index","playerName","playerIndex","hasCard","some","playerCard","filter","playerData","setTimeout","p","handleDistributeGorgee","toPlayer","currentGiver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/PROJETS ALL/ardede/ardede/src/components/DonnePrendPhase/DonnePrendPhase.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst DonnePrendPhase = ({ players, remainingDeck, playerCards, updateGorgees, endDonnePrendPhase }) => {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardRevealed, setCardRevealed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [playersWithCard, setPlayersWithCard] = useState([]);\n  const [currentGiverIndex, setCurrentGiverIndex] = useState(0); // Index du joueur actuel qui doit donner\n\n  // Fonction pour tirer une carte du deck restant\n  const drawCard = () => {\n    if (remainingDeck.length === 0) {\n      setMessage(\"Le deck est vide, la phase est terminée !\");\n      return;\n    }\n\n    const newDeck = [...remainingDeck];\n    const card = newDeck.pop();\n    setCurrentCard(card);\n    setCardRevealed(true);\n    setMessage(`Carte tirée : ${card.value} de ${card.suit}`);\n\n    // Trouver les joueurs qui ont cette carte\n    const playersWithThisCard = players\n      .map((player, index) => ({\n        playerName: player,\n        playerIndex: index,\n        hasCard: playerCards[index].some(\n          (playerCard) => playerCard.value === card.value && playerCard.suit === card.suit\n        ),\n      }))\n      .filter((playerData) => playerData.hasCard);\n\n    if (playersWithThisCard.length === 0) {\n      // Mode Hardcore : tirer une nouvelle carte si personne n'a la carte\n      setMessage(\"Mode Hardcore ! Aucune correspondance, nouvelle carte !\");\n      setCardRevealed(false);\n      setTimeout(drawCard, 1500); // Attendre un peu avant de tirer une nouvelle carte\n    } else {\n      setPlayersWithCard(playersWithThisCard.map((p) => p.playerIndex));\n      setCurrentGiverIndex(0); // Commence par le premier joueur qui doit donner\n    }\n  };\n\n  // Fonction pour distribuer 1 gorgée\n  const handleDistributeGorgee = (toPlayer) => {\n    updateGorgees(toPlayer, 1);\n    const currentGiver = players[playersWithCard[currentGiverIndex]];\n    setMessage(`${currentGiver} a distribué 1 gorgée à ${players[toPlayer]}.`);\n\n    // Passer au prochain joueur qui doit distribuer ou terminer\n    if (currentGiverIndex < playersWithCard.length - 1) {\n      setCurrentGiverIndex(currentGiverIndex + 1);\n    } else {\n      setMessage(\"Distribution terminée. Passer au joueur suivant.\");\n      setTimeout(endDonnePrendPhase, 2000); // Attendre avant de passer à l'étape suivante\n    }\n  };\n\n  return (\n    <div className=\"donne-prend-phase\">\n      <h1>Phase Donne/Prend</h1>\n      {!cardRevealed ? (\n        <button onClick={drawCard}>Tirer une carte</button>\n      ) : (\n        <div>\n          <p>{message}</p>\n          {playersWithCard.length > 0 ? (\n            <div>\n              <h3>{players[playersWithCard[currentGiverIndex]]}, distribuez vos gorgées</h3>\n              {players.map((name, index) => (\n                index !== playersWithCard[currentGiverIndex] && (\n                  <button key={index} onClick={() => handleDistributeGorgee(index)}>\n                    Donner 1 gorgée à {name}\n                  </button>\n                )\n              ))}\n            </div>\n          ) : (\n            <p>Aucun joueur n'a cette carte. Nouvelle carte en mode Hardcore...</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DonnePrendPhase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}