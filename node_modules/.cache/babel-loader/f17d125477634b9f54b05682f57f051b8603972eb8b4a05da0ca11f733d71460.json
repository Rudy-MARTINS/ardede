{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Bureau\\\\ardede\\\\ardede\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './app.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPlayers, setNumPlayers] = useState(2); // Nombre de joueurs\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill('')); // Noms des joueurs\n  const [startGame, setStartGame] = useState(false); // Démarrage du jeu\n  const [currentPlayer, setCurrentPlayer] = useState(0); // Suivi du joueur actuel\n  const [roundNumber, setRoundNumber] = useState(1); // Numéro du tour (1 à 4)\n  const [turnNumber, setTurnNumber] = useState(1); // Tour de chaque joueur (chaque joueur fait son tour 1, puis passe à 2...)\n  const [message, setMessage] = useState(''); // Messages de feedback\n  const [currentCard, setCurrentCard] = useState(null); // Carte courante\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([])); // Cartes tirées par chaque joueur\n  const [gorgéesDistribuées, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0)); // Gorgées distribuées\n  const [gorgéesReçues, setGorgeesRecues] = useState(Array(numPlayers).fill(0)); // Gorgées reçues\n  const [showDistribution, setShowDistribution] = useState(false); // Affichage de la distribution des gorgées\n  const [cardRevealed, setCardRevealed] = useState(false); // Carte révélée après la devinette\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0); // Nombre de gorgées à distribuer\n  const [splitGorgees, setSplitGorgees] = useState([]); // Gorgées réparties entre joueurs\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle']; // Formes de carte\n\n  // Génère une carte aléatoire (valeur et couleur)\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1; // Carte de 1 à 13\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return {\n      value,\n      suit\n    };\n  };\n\n  // Gestion du nombre de joueurs\n  const handleNumPlayersChange = e => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([])); // Initialiser les cartes pour chaque joueur\n  };\n\n  // Gestion du changement de pseudo\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  // Démarrer le jeu après avoir saisi les pseudos\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false); // Cacher la carte tant que la devinette n'est pas faite\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  // Fonction pour gérer la devinette du joueur selon le tour actuel\n  const handlePlayerGuess = guess => {\n    setCardRevealed(true); // Révéler la carte après la devinette\n\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Tour 1 : Rouge ou Noir\n  const handleColorGuess = guess => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if (guess === 'rouge' && isRed || guess === 'noir' && !isRed) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 1 gorgée.`);\n      setGorgeesToDistribute(1); // 1 gorgée pour le tour 1\n      setShowDistribution(true); // Afficher la distribution des gorgées\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 1 gorgée.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 1; // Boit une gorgée\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn(); // Passer au joueur suivant après avoir bu\n    }\n  };\n\n  // Tour 2 : Supérieure, Inférieure ou Égale\n  const handleComparisonGuess = guess => {\n    const previousCard = playerCards[currentPlayer][0]; // Carte du premier tour\n    const comparison = currentCard.value - previousCard.value;\n    if (guess === 'supérieure' && comparison > 0 || guess === 'inférieure' && comparison < 0 || guess === 'égale' && comparison === 0) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 2 gorgées.`);\n      setGorgeesToDistribute(2); // 2 gorgées pour le tour 2\n      setShowDistribution(true);\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 2 gorgées.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 2;\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn();\n    }\n  };\n\n  // Tour 3 : À l'intérieur ou à l'extérieur\n  const handleInsideOutsideGuess = guess => {\n    const firstCard = playerCards[currentPlayer][0];\n    const secondCard = playerCards[currentPlayer][1];\n    const isInside = currentCard.value > Math.min(firstCard.value, secondCard.value) && currentCard.value < Math.max(firstCard.value, secondCard.value);\n    if (guess === 'intérieur' && isInside || guess === 'extérieur' && !isInside) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 3 gorgées.`);\n      setGorgeesToDistribute(3); // 3 gorgées pour le tour 3\n      setShowDistribution(true);\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 3 gorgées.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 3;\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn();\n    }\n  };\n\n  // Tour 4 : Forme\n  const handleSuitGuess = guess => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 4 gorgées.`);\n      setGorgeesToDistribute(4); // 4 gorgées pour le tour 4\n      setShowDistribution(true);\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 4 gorgées.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 4;\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn();\n    }\n  };\n\n  // Fonction pour distribuer des gorgées avec la possibilité de les répartir entre plusieurs joueurs\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, {\n      toPlayer,\n      amount\n    }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n\n    // Vérifie si le joueur a distribué toutes les gorgées\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n    if (totalDistributed === gorgeesToDistribute) {\n      // Mise à jour des gorgées distribuées et reçues\n      let newGorgeesDistribuees = [...gorgéesDistribuees];\n      let newGorgeesRecues = [...gorgéesReçues];\n      newSplitGorgees.forEach(({\n        toPlayer,\n        amount\n      }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]); // Réinitialiser les gorgées réparties\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  // Passer au tour suivant pour un joueur\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    // Ajouter la carte tirée à l'historique du joueur actuel\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    // Si tous les joueurs ont fait le même tour, passer au tour suivant\n    if (nextPlayer === 0) {\n      setTurnNumber(turnNumber + 1); // Passer au tour suivant pour tous les joueurs\n      if (turnNumber === 4) {\n        setTurnNumber(1); // Si on a fait les 4 tours, recommencer\n      }\n    }\n\n    // Générer une nouvelle carte pour le joueur suivant\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false); // Cacher la nouvelle carte tant que la devinette n'est pas faite\n\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  // Récapitulatif à la fin\n  const showRecap = () => {\n    return playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [name, \" a distribu\\xE9 \", gorgéesDistribuées[index], \" gorg\\xE9es et a bu \", gorgéesReçues[index], \" gorg\\xE9es.\"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this));\n  };\n  if (startGame) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), cardRevealed ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Carte r\\xE9v\\xE9l\\xE9e : \", currentCard === null || currentCard === void 0 ? void 0 : currentCard.value, \" de \", currentCard === null || currentCard === void 0 ? void 0 : currentCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this) : null, playerCards[currentPlayer].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Cartes tir\\xE9es par \", playerNames[currentPlayer]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), playerCards[currentPlayer].map((card, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [card.value, \" de \", card.suit]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), turnNumber === 1 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est rouge ou noire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('rouge'),\n          children: \"Rouge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('noir'),\n          children: \"Noir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), turnNumber === 2 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est sup\\xE9rieure, inf\\xE9rieure ou \\xE9gale \\xE0 la premi\\xE8re\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('supérieure'),\n          children: \"Sup\\xE9rieure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('inférieure'),\n          children: \"Inf\\xE9rieure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('égale'),\n          children: \"\\xC9gale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this), turnNumber === 3 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez si la carte est \\xE0 l'int\\xE9rieur ou \\xE0 l'ext\\xE9rieur des cartes pr\\xE9c\\xE9dentes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('intérieur'),\n          children: \"\\xC0 l'int\\xE9rieur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('extérieur'),\n          children: \"\\xC0 l'ext\\xE9rieur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), turnNumber === 4 && !showDistribution && !cardRevealed && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Devinez la forme de la carte\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('cœur'),\n          children: \"C\\u0153ur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('carreau'),\n          children: \"Carreau\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('pique'),\n          children: \"Pique\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlayerGuess('trèfle'),\n          children: \"Tr\\xE8fle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), showDistribution ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Distribuez vos gorg\\xE9es (\", gorgeesToDistribute, \" \\xE0 r\\xE9partir)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), playerNames.map((name, index) => index !== currentPlayer && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => distributeGorgees(index, 1),\n          children: [\"Donner 1 gorg\\xE9e \\xE0 \", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this) : null, turnNumber === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9capitulatif\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), showRecap()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"L'Ardechoise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"numPlayers\",\n        children: \"Nombre de joueurs :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"numPlayers\",\n        value: numPlayers,\n        onChange: handleNumPlayersChange,\n        children: [...Array(9).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: num + 2,\n          children: num + 2\n        }, num + 2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-names\",\n        children: playerNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: `Joueur ${index + 1}`,\n          value: name,\n          onChange: e => handlePlayerNameChange(e, index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-game-btn\",\n      onClick: handleStartGame,\n      children: \"Lancer le jeu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rh1yaj6i5DjYHqNX67ZfBYZX0og=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","numPlayers","setNumPlayers","playerNames","setPlayerNames","Array","fill","startGame","setStartGame","currentPlayer","setCurrentPlayer","roundNumber","setRoundNumber","turnNumber","setTurnNumber","message","setMessage","currentCard","setCurrentCard","playerCards","setPlayerCards","gorgéesDistribuées","setGorgeesDistribuees","gorgéesReçues","setGorgeesRecues","showDistribution","setShowDistribution","cardRevealed","setCardRevealed","gorgeesToDistribute","setGorgeesToDistribute","splitGorgees","setSplitGorgees","suits","generateCard","value","Math","floor","random","suit","handleNumPlayersChange","e","parseInt","target","handlePlayerNameChange","index","newPlayerNames","handleStartGame","every","name","trim","card","alert","handlePlayerGuess","guess","handleColorGuess","handleComparisonGuess","handleInsideOutsideGuess","handleSuitGuess","isRed","newGorgeesRecues","nextTurn","previousCard","comparison","firstCard","secondCard","isInside","min","max","distributeGorgees","toPlayer","amount","newSplitGorgees","totalDistributed","reduce","total","entry","newGorgeesDistribuees","gorgéesDistribuees","forEach","nextPlayer","newPlayerCards","newCard","showRecap","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","onClick","htmlFor","id","onChange","keys","num","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Bureau/ardede/ardede/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './app.css';\n\nfunction App() {\n  const [numPlayers, setNumPlayers] = useState(2); // Nombre de joueurs\n  const [playerNames, setPlayerNames] = useState(Array(numPlayers).fill('')); // Noms des joueurs\n  const [startGame, setStartGame] = useState(false); // Démarrage du jeu\n  const [currentPlayer, setCurrentPlayer] = useState(0); // Suivi du joueur actuel\n  const [roundNumber, setRoundNumber] = useState(1); // Numéro du tour (1 à 4)\n  const [turnNumber, setTurnNumber] = useState(1); // Tour de chaque joueur (chaque joueur fait son tour 1, puis passe à 2...)\n  const [message, setMessage] = useState(''); // Messages de feedback\n  const [currentCard, setCurrentCard] = useState(null); // Carte courante\n  const [playerCards, setPlayerCards] = useState(Array(numPlayers).fill([])); // Cartes tirées par chaque joueur\n  const [gorgéesDistribuées, setGorgeesDistribuees] = useState(Array(numPlayers).fill(0)); // Gorgées distribuées\n  const [gorgéesReçues, setGorgeesRecues] = useState(Array(numPlayers).fill(0)); // Gorgées reçues\n  const [showDistribution, setShowDistribution] = useState(false); // Affichage de la distribution des gorgées\n  const [cardRevealed, setCardRevealed] = useState(false); // Carte révélée après la devinette\n  const [gorgeesToDistribute, setGorgeesToDistribute] = useState(0); // Nombre de gorgées à distribuer\n  const [splitGorgees, setSplitGorgees] = useState([]); // Gorgées réparties entre joueurs\n\n  const suits = ['cœur', 'carreau', 'pique', 'trèfle']; // Formes de carte\n\n  // Génère une carte aléatoire (valeur et couleur)\n  const generateCard = () => {\n    const value = Math.floor(Math.random() * 13) + 1; // Carte de 1 à 13\n    const suit = suits[Math.floor(Math.random() * 4)];\n    return { value, suit };\n  };\n\n  // Gestion du nombre de joueurs\n  const handleNumPlayersChange = (e) => {\n    const value = parseInt(e.target.value);\n    setNumPlayers(value);\n    setPlayerNames(Array(value).fill(''));\n    setPlayerCards(Array(value).fill([])); // Initialiser les cartes pour chaque joueur\n  };\n\n  // Gestion du changement de pseudo\n  const handlePlayerNameChange = (e, index) => {\n    const newPlayerNames = [...playerNames];\n    newPlayerNames[index] = e.target.value;\n    setPlayerNames(newPlayerNames);\n  };\n\n  // Démarrer le jeu après avoir saisi les pseudos\n  const handleStartGame = () => {\n    if (playerNames.every(name => name.trim() !== '')) {\n      setStartGame(true);\n      setMessage(`${playerNames[currentPlayer]} commence le tour 1 : Rouge ou Noir.`);\n      const card = generateCard();\n      setCurrentCard(card);\n      setCardRevealed(false); // Cacher la carte tant que la devinette n'est pas faite\n    } else {\n      alert('Veuillez remplir tous les noms des joueurs.');\n    }\n  };\n\n  // Fonction pour gérer la devinette du joueur selon le tour actuel\n  const handlePlayerGuess = (guess) => {\n    setCardRevealed(true); // Révéler la carte après la devinette\n\n    switch (roundNumber) {\n      case 1:\n        handleColorGuess(guess);\n        break;\n      case 2:\n        handleComparisonGuess(guess);\n        break;\n      case 3:\n        handleInsideOutsideGuess(guess);\n        break;\n      case 4:\n        handleSuitGuess(guess);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Tour 1 : Rouge ou Noir\n  const handleColorGuess = (guess) => {\n    const isRed = currentCard.suit === 'cœur' || currentCard.suit === 'carreau';\n    if ((guess === 'rouge' && isRed) || (guess === 'noir' && !isRed)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 1 gorgée.`);\n      setGorgeesToDistribute(1); // 1 gorgée pour le tour 1\n      setShowDistribution(true); // Afficher la distribution des gorgées\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 1 gorgée.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 1; // Boit une gorgée\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn(); // Passer au joueur suivant après avoir bu\n    }\n  };\n\n  // Tour 2 : Supérieure, Inférieure ou Égale\n  const handleComparisonGuess = (guess) => {\n    const previousCard = playerCards[currentPlayer][0]; // Carte du premier tour\n    const comparison = currentCard.value - previousCard.value;\n\n    if ((guess === 'supérieure' && comparison > 0) ||\n        (guess === 'inférieure' && comparison < 0) ||\n        (guess === 'égale' && comparison === 0)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 2 gorgées.`);\n      setGorgeesToDistribute(2); // 2 gorgées pour le tour 2\n      setShowDistribution(true);\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 2 gorgées.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 2;\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn();\n    }\n  };\n\n  // Tour 3 : À l'intérieur ou à l'extérieur\n  const handleInsideOutsideGuess = (guess) => {\n    const firstCard = playerCards[currentPlayer][0];\n    const secondCard = playerCards[currentPlayer][1];\n    const isInside = currentCard.value > Math.min(firstCard.value, secondCard.value) && currentCard.value < Math.max(firstCard.value, secondCard.value);\n\n    if ((guess === 'intérieur' && isInside) || (guess === 'extérieur' && !isInside)) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 3 gorgées.`);\n      setGorgeesToDistribute(3); // 3 gorgées pour le tour 3\n      setShowDistribution(true);\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 3 gorgées.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 3;\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn();\n    }\n  };\n\n  // Tour 4 : Forme\n  const handleSuitGuess = (guess) => {\n    if (guess === currentCard.suit) {\n      setMessage(`${playerNames[currentPlayer]} a deviné correctement et peut distribuer 4 gorgées.`);\n      setGorgeesToDistribute(4); // 4 gorgées pour le tour 4\n      setShowDistribution(true);\n    } else {\n      setMessage(`${playerNames[currentPlayer]} a perdu et boit 4 gorgées.`);\n      let newGorgeesRecues = [...gorgéesReçues];\n      newGorgeesRecues[currentPlayer] += 4;\n      setGorgeesRecues(newGorgeesRecues);\n      nextTurn();\n    }\n  };\n\n  // Fonction pour distribuer des gorgées avec la possibilité de les répartir entre plusieurs joueurs\n  const distributeGorgees = (toPlayer, amount) => {\n    let newSplitGorgees = [...splitGorgees, { toPlayer, amount }];\n    let totalDistributed = newSplitGorgees.reduce((total, entry) => total + entry.amount, 0);\n\n    // Vérifie si le joueur a distribué toutes les gorgées\n    if (totalDistributed > gorgeesToDistribute) {\n      alert(\"Vous ne pouvez pas distribuer plus que le nombre de gorgées à distribuer.\");\n      return;\n    }\n\n    if (totalDistributed === gorgeesToDistribute) {\n      // Mise à jour des gorgées distribuées et reçues\n      let newGorgeesDistribuees = [...gorgéesDistribuees];\n      let newGorgeesRecues = [...gorgéesReçues];\n      newSplitGorgees.forEach(({ toPlayer, amount }) => {\n        newGorgeesDistribuees[currentPlayer] += amount;\n        newGorgeesRecues[toPlayer] += amount;\n      });\n\n      setGorgeesDistribuees(newGorgeesDistribuees);\n      setGorgeesRecues(newGorgeesRecues);\n      setShowDistribution(false);\n      setSplitGorgees([]); // Réinitialiser les gorgées réparties\n      nextTurn();\n    } else {\n      setSplitGorgees(newSplitGorgees);\n    }\n  };\n\n  // Passer au tour suivant pour un joueur\n  const nextTurn = () => {\n    let nextPlayer = (currentPlayer + 1) % numPlayers;\n\n    // Ajouter la carte tirée à l'historique du joueur actuel\n    let newPlayerCards = [...playerCards];\n    newPlayerCards[currentPlayer] = [...newPlayerCards[currentPlayer], currentCard];\n    setPlayerCards(newPlayerCards);\n\n    // Si tous les joueurs ont fait le même tour, passer au tour suivant\n    if (nextPlayer === 0) {\n      setTurnNumber(turnNumber + 1); // Passer au tour suivant pour tous les joueurs\n      if (turnNumber === 4) {\n        setTurnNumber(1); // Si on a fait les 4 tours, recommencer\n      }\n    }\n\n    // Générer une nouvelle carte pour le joueur suivant\n    const newCard = generateCard();\n    setCurrentCard(newCard);\n    setCardRevealed(false); // Cacher la nouvelle carte tant que la devinette n'est pas faite\n\n    setCurrentPlayer(nextPlayer);\n    setMessage(`${playerNames[nextPlayer]}, à toi de jouer pour le tour ${roundNumber}.`);\n  };\n\n  // Récapitulatif à la fin\n  const showRecap = () => {\n    return playerNames.map((name, index) => (\n      <p key={index}>\n        {name} a distribué {gorgéesDistribuées[index]} gorgées et a bu {gorgéesReçues[index]} gorgées.\n      </p>\n    ));\n  };\n\n  if (startGame) {\n    return (\n      <div className=\"game\">\n        <h2>{message}</h2>\n\n        {cardRevealed ? (\n          <p>Carte révélée : {currentCard?.value} de {currentCard?.suit}</p>\n        ) : null}\n\n        {playerCards[currentPlayer].length > 0 && (\n          <div>\n            <h3>Cartes tirées par {playerNames[currentPlayer]}</h3>\n            {playerCards[currentPlayer].map((card, index) => (\n              <p key={index}>\n                {card.value} de {card.suit}\n              </p>\n            ))}\n          </div>\n        )}\n\n        {turnNumber === 1 && !showDistribution && !cardRevealed && (\n          <div>\n            <h3>Devinez si la carte est rouge ou noire</h3>\n            <button onClick={() => handlePlayerGuess('rouge')}>Rouge</button>\n            <button onClick={() => handlePlayerGuess('noir')}>Noir</button>\n          </div>\n        )}\n\n        {turnNumber === 2 && !showDistribution && !cardRevealed && (\n          <div>\n            <h3>Devinez si la carte est supérieure, inférieure ou égale à la première</h3>\n            <button onClick={() => handlePlayerGuess('supérieure')}>Supérieure</button>\n            <button onClick={() => handlePlayerGuess('inférieure')}>Inférieure</button>\n            <button onClick={() => handlePlayerGuess('égale')}>Égale</button>\n          </div>\n        )}\n\n        {turnNumber === 3 && !showDistribution && !cardRevealed && (\n          <div>\n            <h3>Devinez si la carte est à l'intérieur ou à l'extérieur des cartes précédentes</h3>\n            <button onClick={() => handlePlayerGuess('intérieur')}>À l'intérieur</button>\n            <button onClick={() => handlePlayerGuess('extérieur')}>À l'extérieur</button>\n          </div>\n        )}\n\n        {turnNumber === 4 && !showDistribution && !cardRevealed && (\n          <div>\n            <h3>Devinez la forme de la carte</h3>\n            <button onClick={() => handlePlayerGuess('cœur')}>Cœur</button>\n            <button onClick={() => handlePlayerGuess('carreau')}>Carreau</button>\n            <button onClick={() => handlePlayerGuess('pique')}>Pique</button>\n            <button onClick={() => handlePlayerGuess('trèfle')}>Trèfle</button>\n          </div>\n        )}\n\n        {showDistribution ? (\n          <div>\n            <h3>Distribuez vos gorgées ({gorgeesToDistribute} à répartir)</h3>\n            {playerNames.map((name, index) => (\n              index !== currentPlayer && (\n                <button key={index} onClick={() => distributeGorgees(index, 1)}>\n                  Donner 1 gorgée à {name}\n                </button>\n              )\n            ))}\n          </div>\n        ) : null}\n\n        {turnNumber === 4 && (\n          <div>\n            <h2>Récapitulatif</h2>\n            {showRecap()}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">L'Ardechoise</h1>\n      {/* Sélecteur de nombre de joueurs */}\n      <div className=\"player-selection\">\n        <label htmlFor=\"numPlayers\">Nombre de joueurs :</label>\n        <select id=\"numPlayers\" value={numPlayers} onChange={handleNumPlayersChange}>\n          {[...Array(9).keys()].map((num) => (\n            <option key={num + 2} value={num + 2}>\n              {num + 2}\n            </option>\n          ))}\n        </select>\n\n        {/* Champs de saisie pour les noms des joueurs */}\n        <div className=\"player-names\">\n          {playerNames.map((name, index) => (\n            <input\n              key={index}\n              type=\"text\"\n              placeholder={`Joueur ${index + 1}`}\n              value={name}\n              onChange={(e) => handlePlayerNameChange(e, index)}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Bouton pour lancer le jeu */}\n      <button className=\"start-game-btn\" onClick={handleStartGame}>Lancer le jeu</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}